//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/sneakyanimeow/RiderProjects/AntlrTests/OwOLang/OwOLang.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrTests.OwOLang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class OwOLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		INT=32, FLOAT=33, ID=34, STRING=35, BOOL=36, WS=37, COMMENT=38, LINE_COMMENT=39;
	public const int
		RULE_script = 0, RULE_function = 1, RULE_print = 2, RULE_loop_x_times = 3, 
		RULE_declare_new_type = 4, RULE_declare_new_variable = 5, RULE_set_variable = 6, 
		RULE_declare_and_set_variable = 7, RULE_expression = 8, RULE_type = 9, 
		RULE_primitives = 10, RULE_id = 11, RULE_int = 12, RULE_float = 13, RULE_string = 14, 
		RULE_bool = 15;
	public static readonly string[] ruleNames = {
		"script", "function", "print", "loop_x_times", "declare_new_type", "declare_new_variable", 
		"set_variable", "declare_and_set_variable", "expression", "type", "primitives", 
		"id", "int", "float", "string", "bool"
	};

	private static readonly string[] _LiteralNames = {
		null, "'OwO'", "'sayz'", "'do dis'", "'timez doez'", "'endz'", "'datsa'", 
		"'datsall'", "'i can haz'", "'hoos race iz'", "'iz nao'", "'^+^'", "'^-^'", 
		"'^*^'", "'^/^'", "'^%^'", "'^<^'", "'^>^'", "'^<=^'", "'^>=^'", "'^==^'", 
		"'^!=^'", "'^&&^'", "'^||^'", "'^!^'", "'from'", "'numbah'", "'dottynumbah'", 
		"'textz'", "'opinionz'", "'idc'", "'lotz da'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "INT", "FLOAT", "ID", 
		"STRING", "BOOL", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OwOLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static OwOLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OwOLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OwOLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OwOLangParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(OwOLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(T__0);
			State = 33;
			Match(ID);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 133160763724L) != 0)) {
				{
				{
				State = 34;
				function();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declare_new_variableContext declare_new_variable() {
			return GetRuleContext<Declare_new_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_variableContext set_variable() {
			return GetRuleContext<Set_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_and_set_variableContext declare_and_set_variable() {
			return GetRuleContext<Declare_and_set_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_x_timesContext loop_x_times() {
			return GetRuleContext<Loop_x_timesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_new_typeContext declare_new_type() {
			return GetRuleContext<Declare_new_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_function);
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				declare_new_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				set_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				declare_and_set_variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45;
				loop_x_times();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 46;
				declare_new_type();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 47;
				print();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 4, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(T__1);
			State = 51;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_x_timesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public Loop_x_timesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_x_times; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterLoop_x_times(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitLoop_x_times(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_x_times(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_x_timesContext loop_x_times() {
		Loop_x_timesContext _localctx = new Loop_x_timesContext(Context, State);
		EnterRule(_localctx, 6, RULE_loop_x_times);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			Match(T__2);
			State = 54;
			expression(0);
			State = 55;
			Match(T__3);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 133160763724L) != 0)) {
				{
				{
				State = 56;
				function();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_new_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_new_variableContext[] declare_new_variable() {
			return GetRuleContexts<Declare_new_variableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_new_variableContext declare_new_variable(int i) {
			return GetRuleContext<Declare_new_variableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_and_set_variableContext[] declare_and_set_variable() {
			return GetRuleContexts<Declare_and_set_variableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_and_set_variableContext declare_and_set_variable(int i) {
			return GetRuleContext<Declare_and_set_variableContext>(i);
		}
		public Declare_new_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_new_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterDeclare_new_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitDeclare_new_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_new_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_new_typeContext declare_new_type() {
		Declare_new_typeContext _localctx = new Declare_new_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_declare_new_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(T__5);
			State = 65;
			id();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				State = 68;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 66;
					declare_new_variable();
					}
					break;
				case 2:
					{
					State = 67;
					declare_and_set_variable();
					}
					break;
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_new_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Declare_new_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_new_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterDeclare_new_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitDeclare_new_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_new_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_new_variableContext declare_new_variable() {
		Declare_new_variableContext _localctx = new Declare_new_variableContext(Context, State);
		EnterRule(_localctx, 10, RULE_declare_new_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__7);
			State = 76;
			id();
			State = 77;
			Match(T__8);
			State = 78;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Set_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterSet_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitSet_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_variableContext set_variable() {
		Set_variableContext _localctx = new Set_variableContext(Context, State);
		EnterRule(_localctx, 12, RULE_set_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			expression(0);
			State = 81;
			Match(T__9);
			State = 82;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_and_set_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Declare_and_set_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_and_set_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterDeclare_and_set_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitDeclare_and_set_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_and_set_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_and_set_variableContext declare_and_set_variable() {
		Declare_and_set_variableContext _localctx = new Declare_and_set_variableContext(Context, State);
		EnterRule(_localctx, 14, RULE_declare_and_set_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(T__7);
			State = 85;
			id();
			State = 86;
			Match(T__8);
			State = 87;
			type();
			State = 88;
			Match(T__9);
			State = 89;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitivesContext primitives() {
			return GetRuleContext<PrimitivesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
			case STRING:
			case BOOL:
				{
				State = 92;
				primitives();
				}
				break;
			case ID:
				{
				State = 93;
				id();
				}
				break;
			case T__23:
				{
				State = 94;
				Match(T__23);
				State = 95;
				expression(2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 140;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 98;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 99;
						Match(T__10);
						State = 100;
						expression(16);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 101;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 102;
						Match(T__11);
						State = 103;
						expression(15);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 104;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 105;
						Match(T__12);
						State = 106;
						expression(14);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 107;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 108;
						Match(T__13);
						State = 109;
						expression(13);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 111;
						Match(T__14);
						State = 112;
						expression(12);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 113;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 114;
						Match(T__15);
						State = 115;
						expression(11);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 116;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 117;
						Match(T__16);
						State = 118;
						expression(10);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 119;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 120;
						Match(T__17);
						State = 121;
						expression(9);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 122;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 123;
						Match(T__18);
						State = 124;
						expression(8);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 125;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 126;
						Match(T__19);
						State = 127;
						expression(7);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 128;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 129;
						Match(T__20);
						State = 130;
						expression(6);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 131;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 132;
						Match(T__21);
						State = 133;
						expression(5);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 134;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 135;
						Match(T__22);
						State = 136;
						expression(4);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 137;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 138;
						Match(T__24);
						State = 139;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145;
				Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147;
				Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 4);
				{
				State = 148;
				Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 5);
				{
				State = 149;
				Match(T__29);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 150;
				id();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 7);
				{
				State = 151;
				Match(T__30);
				State = 152;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitivesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatContext @float() {
			return GetRuleContext<FloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public PrimitivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitives; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterPrimitives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitPrimitives(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitivesContext primitives() {
		PrimitivesContext _localctx = new PrimitivesContext(Context, State);
		EnterRule(_localctx, 20, RULE_primitives);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				@int();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156;
				@float();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 157;
				@string();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 158;
				@bool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(OwOLangParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 22, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(OwOLangParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 24, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(OwOLangParser.FLOAT, 0); }
		public FloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_float; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatContext @float() {
		FloatContext _localctx = new FloatContext(Context, State);
		EnterRule(_localctx, 26, RULE_float);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(OwOLangParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 28, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(OwOLangParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IOwOLangListener typedListener = listener as IOwOLangListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOwOLangVisitor<TResult> typedVisitor = visitor as IOwOLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 30, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,39,172,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,1,0,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,1,0,1,1,1,1,1,1,
		1,1,1,1,1,1,3,1,49,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,58,8,3,10,3,12,
		3,61,9,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,69,8,4,10,4,12,4,72,9,4,1,4,1,4,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,3,8,97,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,141,8,8,10,8,12,
		8,144,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,154,8,9,1,10,1,10,1,10,1,
		10,3,10,160,8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
		0,1,16,16,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,0,0,189,0,32,1,0,
		0,0,2,48,1,0,0,0,4,50,1,0,0,0,6,53,1,0,0,0,8,64,1,0,0,0,10,75,1,0,0,0,
		12,80,1,0,0,0,14,84,1,0,0,0,16,96,1,0,0,0,18,153,1,0,0,0,20,159,1,0,0,
		0,22,161,1,0,0,0,24,163,1,0,0,0,26,165,1,0,0,0,28,167,1,0,0,0,30,169,1,
		0,0,0,32,33,5,1,0,0,33,37,5,34,0,0,34,36,3,2,1,0,35,34,1,0,0,0,36,39,1,
		0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,37,1,0,0,0,40,41,5,
		0,0,1,41,1,1,0,0,0,42,49,3,10,5,0,43,49,3,12,6,0,44,49,3,14,7,0,45,49,
		3,6,3,0,46,49,3,8,4,0,47,49,3,4,2,0,48,42,1,0,0,0,48,43,1,0,0,0,48,44,
		1,0,0,0,48,45,1,0,0,0,48,46,1,0,0,0,48,47,1,0,0,0,49,3,1,0,0,0,50,51,5,
		2,0,0,51,52,3,16,8,0,52,5,1,0,0,0,53,54,5,3,0,0,54,55,3,16,8,0,55,59,5,
		4,0,0,56,58,3,2,1,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,
		0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,63,5,5,0,0,63,7,1,0,0,0,64,65,5,6,
		0,0,65,70,3,22,11,0,66,69,3,10,5,0,67,69,3,14,7,0,68,66,1,0,0,0,68,67,
		1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,70,
		1,0,0,0,73,74,5,7,0,0,74,9,1,0,0,0,75,76,5,8,0,0,76,77,3,22,11,0,77,78,
		5,9,0,0,78,79,3,18,9,0,79,11,1,0,0,0,80,81,3,16,8,0,81,82,5,10,0,0,82,
		83,3,16,8,0,83,13,1,0,0,0,84,85,5,8,0,0,85,86,3,22,11,0,86,87,5,9,0,0,
		87,88,3,18,9,0,88,89,5,10,0,0,89,90,3,16,8,0,90,15,1,0,0,0,91,92,6,8,-1,
		0,92,97,3,20,10,0,93,97,3,22,11,0,94,95,5,24,0,0,95,97,3,16,8,2,96,91,
		1,0,0,0,96,93,1,0,0,0,96,94,1,0,0,0,97,142,1,0,0,0,98,99,10,15,0,0,99,
		100,5,11,0,0,100,141,3,16,8,16,101,102,10,14,0,0,102,103,5,12,0,0,103,
		141,3,16,8,15,104,105,10,13,0,0,105,106,5,13,0,0,106,141,3,16,8,14,107,
		108,10,12,0,0,108,109,5,14,0,0,109,141,3,16,8,13,110,111,10,11,0,0,111,
		112,5,15,0,0,112,141,3,16,8,12,113,114,10,10,0,0,114,115,5,16,0,0,115,
		141,3,16,8,11,116,117,10,9,0,0,117,118,5,17,0,0,118,141,3,16,8,10,119,
		120,10,8,0,0,120,121,5,18,0,0,121,141,3,16,8,9,122,123,10,7,0,0,123,124,
		5,19,0,0,124,141,3,16,8,8,125,126,10,6,0,0,126,127,5,20,0,0,127,141,3,
		16,8,7,128,129,10,5,0,0,129,130,5,21,0,0,130,141,3,16,8,6,131,132,10,4,
		0,0,132,133,5,22,0,0,133,141,3,16,8,5,134,135,10,3,0,0,135,136,5,23,0,
		0,136,141,3,16,8,4,137,138,10,1,0,0,138,139,5,25,0,0,139,141,3,16,8,2,
		140,98,1,0,0,0,140,101,1,0,0,0,140,104,1,0,0,0,140,107,1,0,0,0,140,110,
		1,0,0,0,140,113,1,0,0,0,140,116,1,0,0,0,140,119,1,0,0,0,140,122,1,0,0,
		0,140,125,1,0,0,0,140,128,1,0,0,0,140,131,1,0,0,0,140,134,1,0,0,0,140,
		137,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,17,1,0,
		0,0,144,142,1,0,0,0,145,154,5,26,0,0,146,154,5,27,0,0,147,154,5,28,0,0,
		148,154,5,29,0,0,149,154,5,30,0,0,150,154,3,22,11,0,151,152,5,31,0,0,152,
		154,3,18,9,0,153,145,1,0,0,0,153,146,1,0,0,0,153,147,1,0,0,0,153,148,1,
		0,0,0,153,149,1,0,0,0,153,150,1,0,0,0,153,151,1,0,0,0,154,19,1,0,0,0,155,
		160,3,24,12,0,156,160,3,26,13,0,157,160,3,28,14,0,158,160,3,30,15,0,159,
		155,1,0,0,0,159,156,1,0,0,0,159,157,1,0,0,0,159,158,1,0,0,0,160,21,1,0,
		0,0,161,162,5,34,0,0,162,23,1,0,0,0,163,164,5,32,0,0,164,25,1,0,0,0,165,
		166,5,33,0,0,166,27,1,0,0,0,167,168,5,35,0,0,168,29,1,0,0,0,169,170,5,
		36,0,0,170,31,1,0,0,0,10,37,48,59,68,70,96,140,142,153,159
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrTests.OwOLang
