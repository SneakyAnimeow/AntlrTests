//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/meow/RiderProjects/AntlrTests/NekoScript\Seleneko.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrTests.NekoScript {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class SelenekoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, NAME=59, NORMALSTRING=60, 
		CHARSTRING=61, LONGSTRING=62, INT=63, HEX=64, FLOAT=65, HEX_FLOAT=66, 
		COMMENT=67, LINE_COMMENT=68, WS=69, SHEBANG=70;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_native_call = 3, RULE_laststat = 4, 
		RULE_label = 5, RULE_funcname = 6, RULE_varlist = 7, RULE_namelist = 8, 
		RULE_explist = 9, RULE_exp = 10, RULE_prefixexp = 11, RULE_functioncall = 12, 
		RULE_varOrExp = 13, RULE_var = 14, RULE_varSuffix = 15, RULE_nameAndArgs = 16, 
		RULE_args = 17, RULE_functiondef = 18, RULE_funcbody = 19, RULE_parlist = 20, 
		RULE_objectconstructor = 21, RULE_objectfieldlist = 22, RULE_objectfield = 23, 
		RULE_tableconstructor = 24, RULE_fieldlist = 25, RULE_field = 26, RULE_fieldsep = 27, 
		RULE_operatorOr = 28, RULE_operatorAnd = 29, RULE_operatorComparison = 30, 
		RULE_operatorStrcat = 31, RULE_operatorAddSub = 32, RULE_operatorMulDivMod = 33, 
		RULE_operatorBitwise = 34, RULE_operatorUnary = 35, RULE_operatorPower = 36, 
		RULE_number = 37, RULE_string = 38;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "native_call", "laststat", "label", "funcname", 
		"varlist", "namelist", "explist", "exp", "prefixexp", "functioncall", 
		"varOrExp", "var", "varSuffix", "nameAndArgs", "args", "functiondef", 
		"funcbody", "parlist", "objectconstructor", "objectfieldlist", "objectfield", 
		"tableconstructor", "fieldlist", "field", "fieldsep", "operatorOr", "operatorAnd", 
		"operatorComparison", "operatorStrcat", "operatorAddSub", "operatorMulDivMod", 
		"operatorBitwise", "operatorUnary", "operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'goto'", "'{'", "'}'", "'do'", "'end'", 
		"'while'", "'('", "')'", "'repeat'", "'until'", "'if'", "'else'", "'then'", 
		"'for'", "','", "'in'", "'function'", "'let'", "'local'", "'~'", "'return'", 
		"'continue'", "'::'", "'.'", "':'", "'null'", "'nil'", "'false'", "'true'", 
		"'...'", "'['", "']'", "'or'", "'and'", "'<'", "'>'", "'<='", "'>='", 
		"'!='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", "'/'", "'%'", "'//'", 
		"'&'", "'|'", "'<<'", "'>>'", "'not'", "'#'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "NAME", 
		"NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", 
		"COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Seleneko.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SelenekoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SelenekoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SelenekoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SelenekoParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			block();
			State = 79;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LaststatContext laststat() {
			return GetRuleContext<LaststatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 81;
					stat();
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50331656L) != 0)) {
				{
				State = 87;
				laststat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Native_callContext native_call() {
			return GetRuleContext<Native_callContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			int _alt;
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				varlist();
				State = 92;
				Match(T__1);
				State = 93;
				explist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95;
				functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96;
				label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97;
				Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98;
				Match(T__3);
				State = 99;
				Match(NAME);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 108;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 100;
					Match(T__4);
					State = 101;
					block();
					State = 102;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 104;
					Match(T__6);
					State = 105;
					block();
					State = 106;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 110;
				Match(T__8);
				State = 111;
				Match(T__9);
				State = 112;
				exp(0);
				State = 113;
				Match(T__10);
				State = 122;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 114;
					Match(T__4);
					State = 115;
					block();
					State = 116;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 118;
					Match(T__6);
					State = 119;
					block();
					State = 120;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 124;
				Match(T__11);
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 125;
					Match(T__4);
					State = 126;
					block();
					State = 127;
					Match(T__5);
					}
					break;
				case 2:
					{
					State = 129;
					block();
					}
					break;
				}
				State = 132;
				Match(T__12);
				State = 133;
				Match(T__9);
				State = 134;
				exp(0);
				State = 135;
				Match(T__10);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 137;
				Match(T__13);
				State = 138;
				Match(T__9);
				State = 139;
				exp(0);
				State = 140;
				Match(T__10);
				State = 186;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 141;
					Match(T__4);
					State = 142;
					block();
					State = 143;
					Match(T__5);
					State = 155;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 144;
							Match(T__14);
							State = 145;
							Match(T__13);
							State = 146;
							Match(T__9);
							State = 147;
							exp(0);
							State = 148;
							Match(T__10);
							State = 149;
							Match(T__4);
							State = 150;
							block();
							State = 151;
							Match(T__5);
							}
							} 
						}
						State = 157;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					}
					State = 163;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 158;
						Match(T__14);
						State = 159;
						Match(T__4);
						State = 160;
						block();
						State = 161;
						Match(T__5);
						}
						break;
					}
					}
					break;
				case T__15:
					{
					State = 165;
					Match(T__15);
					State = 166;
					block();
					State = 177;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 167;
							Match(T__14);
							State = 168;
							Match(T__13);
							State = 169;
							Match(T__9);
							State = 170;
							exp(0);
							State = 171;
							Match(T__10);
							State = 172;
							Match(T__15);
							State = 173;
							block();
							}
							} 
						}
						State = 179;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					}
					State = 182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__14) {
						{
						State = 180;
						Match(T__14);
						State = 181;
						block();
						}
					}

					State = 184;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 188;
				Match(T__16);
				State = 189;
				Match(T__9);
				State = 190;
				Match(NAME);
				State = 191;
				Match(T__1);
				State = 192;
				exp(0);
				State = 193;
				Match(T__17);
				State = 194;
				exp(0);
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 195;
					Match(T__17);
					State = 196;
					exp(0);
					}
				}

				State = 199;
				Match(T__10);
				State = 208;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 200;
					Match(T__4);
					State = 201;
					block();
					State = 202;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 204;
					Match(T__6);
					State = 205;
					block();
					State = 206;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 210;
				Match(T__16);
				State = 211;
				Match(T__9);
				State = 212;
				stat();
				State = 213;
				Match(T__0);
				State = 214;
				exp(0);
				State = 215;
				Match(T__0);
				State = 216;
				stat();
				State = 217;
				Match(T__10);
				State = 226;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 218;
					Match(T__4);
					State = 219;
					block();
					State = 220;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 222;
					Match(T__6);
					State = 223;
					block();
					State = 224;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 228;
				Match(T__16);
				State = 229;
				Match(T__9);
				State = 230;
				namelist();
				State = 231;
				Match(T__18);
				State = 232;
				explist();
				State = 233;
				Match(T__10);
				State = 242;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 234;
					Match(T__4);
					State = 235;
					block();
					State = 236;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 238;
					Match(T__6);
					State = 239;
					block();
					State = 240;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 244;
				Match(T__19);
				State = 245;
				funcname();
				State = 246;
				funcbody();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 248;
				_la = TokenStream.LA(1);
				if ( !(_la==T__20 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 249;
				Match(T__19);
				State = 250;
				Match(NAME);
				State = 251;
				funcbody();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 252;
				native_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Native_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNative_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNative_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_callContext native_call() {
		Native_callContext _localctx = new Native_callContext(Context, State);
		EnterRule(_localctx, 6, RULE_native_call);
		int _la;
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				Match(T__22);
				State = 256;
				Match(NAME);
				State = 257;
				Match(T__9);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431418462732321L) != 0)) {
					{
					State = 258;
					explist();
					}
				}

				State = 261;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				Match(T__22);
				State = 263;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LaststatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LaststatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_laststat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLaststat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LaststatContext laststat() {
		LaststatContext _localctx = new LaststatContext(Context, State);
		EnterRule(_localctx, 8, RULE_laststat);
		int _la;
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266;
				Match(T__23);
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431418462732321L) != 0)) {
					{
					State = 267;
					explist();
					}
				}

				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				Match(T__2);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				Match(T__24);
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 272;
					Match(T__0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 10, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__25);
			State = 278;
			Match(NAME);
			State = 279;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SelenekoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SelenekoParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(NAME);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 282;
				Match(T__26);
				State = 283;
				Match(NAME);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 289;
				Match(T__27);
				State = 290;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 14, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			var();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 294;
				Match(T__17);
				State = 295;
				var();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SelenekoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SelenekoParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 16, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(NAME);
			State = 306;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 302;
					Match(T__17);
					State = 303;
					Match(NAME);
					}
					} 
				}
				State = 308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 18, RULE_explist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 309;
					exp(0);
					State = 310;
					Match(T__17);
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 317;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectconstructorContext objectconstructor() {
			return GetRuleContext<ObjectconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				{
				State = 320;
				Match(T__28);
				}
				break;
			case T__29:
				{
				State = 321;
				Match(T__29);
				}
				break;
			case T__30:
				{
				State = 322;
				Match(T__30);
				}
				break;
			case T__31:
				{
				State = 323;
				Match(T__31);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 324;
				number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 325;
				@string();
				}
				break;
			case T__32:
				{
				State = 326;
				Match(T__32);
				}
				break;
			case T__19:
				{
				State = 327;
				functiondef();
				}
				break;
			case T__9:
			case NAME:
				{
				State = 328;
				prefixexp();
				}
				break;
			case T__33:
				{
				State = 329;
				tableconstructor();
				}
				break;
			case T__4:
				{
				State = 330;
				objectconstructor();
				}
				break;
			case T__22:
			case T__46:
			case T__55:
			case T__56:
				{
				State = 331;
				operatorUnary();
				State = 332;
				exp(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 368;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 336;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 337;
						operatorPower();
						State = 338;
						exp(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 340;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 341;
						operatorMulDivMod();
						State = 342;
						exp(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 344;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 345;
						operatorAddSub();
						State = 346;
						exp(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 348;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 349;
						operatorStrcat();
						State = 350;
						exp(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 352;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 353;
						operatorComparison();
						State = 354;
						exp(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 356;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 357;
						operatorAnd();
						State = 358;
						exp(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 360;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 361;
						operatorOr();
						State = 362;
						exp(3);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 364;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 365;
						operatorBitwise();
						State = 366;
						exp(2);
						}
						break;
					}
					} 
				}
				State = 372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 22, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			varOrExp();
			State = 377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 374;
					nameAndArgs();
					}
					} 
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			varOrExp();
			State = 382;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 381;
					nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_varOrExp);
		try {
			State = 391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				Match(T__9);
				State = 388;
				exp(0);
				State = 389;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 28, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 393;
				Match(NAME);
				}
				break;
			case T__9:
				{
				State = 394;
				Match(T__9);
				State = 395;
				exp(0);
				State = 396;
				Match(T__10);
				State = 397;
				varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 404;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 401;
					varSuffix();
					}
					} 
				}
				State = 406;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 30, RULE_varSuffix);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 407;
					nameAndArgs();
					}
					} 
				}
				State = 412;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
				{
				State = 413;
				Match(T__33);
				State = 414;
				exp(0);
				State = 415;
				Match(T__34);
				}
				break;
			case T__26:
				{
				State = 417;
				Match(T__26);
				State = 418;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 32, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 421;
				Match(T__27);
				State = 422;
				Match(NAME);
				}
			}

			State = 425;
			args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectconstructorContext objectconstructor() {
			return GetRuleContext<ObjectconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_args);
		int _la;
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				Match(T__9);
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431418462732321L) != 0)) {
					{
					State = 428;
					explist();
					}
				}

				State = 431;
				Match(T__10);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432;
				tableconstructor();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 433;
				objectconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 434;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 36, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(T__19);
			State = 438;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(T__9);
			State = 442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==NAME) {
				{
				State = 441;
				parlist();
				}
			}

			State = 444;
			Match(T__10);
			State = 452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 445;
				Match(T__4);
				State = 446;
				block();
				State = 447;
				Match(T__5);
				}
				break;
			case 2:
				{
				State = 449;
				block();
				State = 450;
				Match(T__7);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 40, RULE_parlist);
		int _la;
		try {
			State = 460;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 454;
				namelist();
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 455;
					Match(T__17);
					State = 456;
					Match(T__32);
					}
				}

				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 459;
				Match(T__32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectfieldlistContext objectfieldlist() {
			return GetRuleContext<ObjectfieldlistContext>(0);
		}
		public ObjectconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterObjectconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitObjectconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectconstructorContext objectconstructor() {
		ObjectconstructorContext _localctx = new ObjectconstructorContext(Context, State);
		EnterRule(_localctx, 42, RULE_objectconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			Match(T__4);
			State = 464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 463;
				objectfieldlist();
				}
			}

			State = 466;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectfieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectfieldContext[] objectfield() {
			return GetRuleContexts<ObjectfieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectfieldContext objectfield(int i) {
			return GetRuleContext<ObjectfieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public ObjectfieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectfieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterObjectfieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitObjectfieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectfieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectfieldlistContext objectfieldlist() {
		ObjectfieldlistContext _localctx = new ObjectfieldlistContext(Context, State);
		EnterRule(_localctx, 44, RULE_objectfieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			objectfield();
			State = 474;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 469;
					fieldsep();
					State = 470;
					objectfield();
					}
					} 
				}
				State = 476;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 477;
				fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectfieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ObjectfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectfield; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterObjectfield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitObjectfield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectfield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectfieldContext objectfield() {
		ObjectfieldContext _localctx = new ObjectfieldContext(Context, State);
		EnterRule(_localctx, 46, RULE_objectfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			Match(NAME);
			State = 481;
			Match(T__1);
			State = 482;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 48, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(T__33);
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431418462732321L) != 0)) {
				{
				State = 485;
				fieldlist();
				}
			}

			State = 488;
			Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 50, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			field();
			State = 496;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 491;
					fieldsep();
					State = 492;
					field();
					}
					} 
				}
				State = 498;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			State = 500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 499;
				fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 54, RULE_fieldsep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 56, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 58, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 60, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34909494181888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 62, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 64, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = TokenStream.LA(1);
			if ( !(_la==T__45 || _la==T__46) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 66, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4222124650659840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 68, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67553994418946048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 70, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 216313519610527744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 72, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SelenekoParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(SelenekoParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SelenekoParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT() { return GetToken(SelenekoParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 74, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(SelenekoParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSTRING() { return GetToken(SelenekoParser.CHARSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(SelenekoParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 76, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070450532247928832L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,70,529,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,1,5,1,83,8,1,10,1,12,1,86,
		9,1,1,1,3,1,89,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,109,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,3,2,123,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,131,8,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,5,2,154,8,2,10,2,12,2,157,9,2,1,2,1,2,1,2,1,2,1,2,3,2,164,8,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,176,8,2,10,2,12,2,179,9,2,1,2,1,
		2,3,2,183,8,2,1,2,1,2,3,2,187,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		3,2,198,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,209,8,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,227,8,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,243,8,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,254,8,2,1,3,1,3,1,3,1,3,3,3,260,8,3,
		1,3,1,3,1,3,3,3,265,8,3,1,4,1,4,3,4,269,8,4,1,4,1,4,1,4,3,4,274,8,4,3,
		4,276,8,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,6,285,8,6,10,6,12,6,288,9,6,1,
		6,1,6,3,6,292,8,6,1,7,1,7,1,7,5,7,297,8,7,10,7,12,7,300,9,7,1,8,1,8,1,
		8,5,8,305,8,8,10,8,12,8,308,9,8,1,9,1,9,1,9,5,9,313,8,9,10,9,12,9,316,
		9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,3,10,335,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,369,8,10,10,10,12,
		10,372,9,10,1,11,1,11,5,11,376,8,11,10,11,12,11,379,9,11,1,12,1,12,4,12,
		383,8,12,11,12,12,12,384,1,13,1,13,1,13,1,13,1,13,3,13,392,8,13,1,14,1,
		14,1,14,1,14,1,14,1,14,3,14,400,8,14,1,14,5,14,403,8,14,10,14,12,14,406,
		9,14,1,15,5,15,409,8,15,10,15,12,15,412,9,15,1,15,1,15,1,15,1,15,1,15,
		1,15,3,15,420,8,15,1,16,1,16,3,16,424,8,16,1,16,1,16,1,17,1,17,3,17,430,
		8,17,1,17,1,17,1,17,1,17,3,17,436,8,17,1,18,1,18,1,18,1,19,1,19,3,19,443,
		8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,453,8,19,1,20,1,20,1,
		20,3,20,458,8,20,1,20,3,20,461,8,20,1,21,1,21,3,21,465,8,21,1,21,1,21,
		1,22,1,22,1,22,1,22,5,22,473,8,22,10,22,12,22,476,9,22,1,22,3,22,479,8,
		22,1,23,1,23,1,23,1,23,1,24,1,24,3,24,487,8,24,1,24,1,24,1,25,1,25,1,25,
		1,25,5,25,495,8,25,10,25,12,25,498,9,25,1,25,3,25,501,8,25,1,26,1,26,1,
		27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,
		34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,0,1,20,39,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,0,8,1,0,21,22,1,0,38,44,1,0,46,47,1,0,
		48,51,2,0,23,23,52,55,3,0,23,23,47,47,56,57,1,0,63,66,1,0,60,62,570,0,
		78,1,0,0,0,2,84,1,0,0,0,4,253,1,0,0,0,6,264,1,0,0,0,8,275,1,0,0,0,10,277,
		1,0,0,0,12,281,1,0,0,0,14,293,1,0,0,0,16,301,1,0,0,0,18,314,1,0,0,0,20,
		334,1,0,0,0,22,373,1,0,0,0,24,380,1,0,0,0,26,391,1,0,0,0,28,399,1,0,0,
		0,30,410,1,0,0,0,32,423,1,0,0,0,34,435,1,0,0,0,36,437,1,0,0,0,38,440,1,
		0,0,0,40,460,1,0,0,0,42,462,1,0,0,0,44,468,1,0,0,0,46,480,1,0,0,0,48,484,
		1,0,0,0,50,490,1,0,0,0,52,502,1,0,0,0,54,504,1,0,0,0,56,506,1,0,0,0,58,
		508,1,0,0,0,60,510,1,0,0,0,62,512,1,0,0,0,64,514,1,0,0,0,66,516,1,0,0,
		0,68,518,1,0,0,0,70,520,1,0,0,0,72,522,1,0,0,0,74,524,1,0,0,0,76,526,1,
		0,0,0,78,79,3,2,1,0,79,80,5,0,0,1,80,1,1,0,0,0,81,83,3,4,2,0,82,81,1,0,
		0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,88,1,0,0,0,86,84,1,0,
		0,0,87,89,3,8,4,0,88,87,1,0,0,0,88,89,1,0,0,0,89,3,1,0,0,0,90,254,5,1,
		0,0,91,92,3,14,7,0,92,93,5,2,0,0,93,94,3,18,9,0,94,254,1,0,0,0,95,254,
		3,24,12,0,96,254,3,10,5,0,97,254,5,3,0,0,98,99,5,4,0,0,99,254,5,59,0,0,
		100,101,5,5,0,0,101,102,3,2,1,0,102,103,5,6,0,0,103,109,1,0,0,0,104,105,
		5,7,0,0,105,106,3,2,1,0,106,107,5,8,0,0,107,109,1,0,0,0,108,100,1,0,0,
		0,108,104,1,0,0,0,109,254,1,0,0,0,110,111,5,9,0,0,111,112,5,10,0,0,112,
		113,3,20,10,0,113,122,5,11,0,0,114,115,5,5,0,0,115,116,3,2,1,0,116,117,
		5,6,0,0,117,123,1,0,0,0,118,119,5,7,0,0,119,120,3,2,1,0,120,121,5,8,0,
		0,121,123,1,0,0,0,122,114,1,0,0,0,122,118,1,0,0,0,123,254,1,0,0,0,124,
		130,5,12,0,0,125,126,5,5,0,0,126,127,3,2,1,0,127,128,5,6,0,0,128,131,1,
		0,0,0,129,131,3,2,1,0,130,125,1,0,0,0,130,129,1,0,0,0,131,132,1,0,0,0,
		132,133,5,13,0,0,133,134,5,10,0,0,134,135,3,20,10,0,135,136,5,11,0,0,136,
		254,1,0,0,0,137,138,5,14,0,0,138,139,5,10,0,0,139,140,3,20,10,0,140,186,
		5,11,0,0,141,142,5,5,0,0,142,143,3,2,1,0,143,155,5,6,0,0,144,145,5,15,
		0,0,145,146,5,14,0,0,146,147,5,10,0,0,147,148,3,20,10,0,148,149,5,11,0,
		0,149,150,5,5,0,0,150,151,3,2,1,0,151,152,5,6,0,0,152,154,1,0,0,0,153,
		144,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,163,1,
		0,0,0,157,155,1,0,0,0,158,159,5,15,0,0,159,160,5,5,0,0,160,161,3,2,1,0,
		161,162,5,6,0,0,162,164,1,0,0,0,163,158,1,0,0,0,163,164,1,0,0,0,164,187,
		1,0,0,0,165,166,5,16,0,0,166,177,3,2,1,0,167,168,5,15,0,0,168,169,5,14,
		0,0,169,170,5,10,0,0,170,171,3,20,10,0,171,172,5,11,0,0,172,173,5,16,0,
		0,173,174,3,2,1,0,174,176,1,0,0,0,175,167,1,0,0,0,176,179,1,0,0,0,177,
		175,1,0,0,0,177,178,1,0,0,0,178,182,1,0,0,0,179,177,1,0,0,0,180,181,5,
		15,0,0,181,183,3,2,1,0,182,180,1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,
		184,185,5,8,0,0,185,187,1,0,0,0,186,141,1,0,0,0,186,165,1,0,0,0,187,254,
		1,0,0,0,188,189,5,17,0,0,189,190,5,10,0,0,190,191,5,59,0,0,191,192,5,2,
		0,0,192,193,3,20,10,0,193,194,5,18,0,0,194,197,3,20,10,0,195,196,5,18,
		0,0,196,198,3,20,10,0,197,195,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,
		199,208,5,11,0,0,200,201,5,5,0,0,201,202,3,2,1,0,202,203,5,6,0,0,203,209,
		1,0,0,0,204,205,5,7,0,0,205,206,3,2,1,0,206,207,5,8,0,0,207,209,1,0,0,
		0,208,200,1,0,0,0,208,204,1,0,0,0,209,254,1,0,0,0,210,211,5,17,0,0,211,
		212,5,10,0,0,212,213,3,4,2,0,213,214,5,1,0,0,214,215,3,20,10,0,215,216,
		5,1,0,0,216,217,3,4,2,0,217,226,5,11,0,0,218,219,5,5,0,0,219,220,3,2,1,
		0,220,221,5,6,0,0,221,227,1,0,0,0,222,223,5,7,0,0,223,224,3,2,1,0,224,
		225,5,8,0,0,225,227,1,0,0,0,226,218,1,0,0,0,226,222,1,0,0,0,227,254,1,
		0,0,0,228,229,5,17,0,0,229,230,5,10,0,0,230,231,3,16,8,0,231,232,5,19,
		0,0,232,233,3,18,9,0,233,242,5,11,0,0,234,235,5,5,0,0,235,236,3,2,1,0,
		236,237,5,6,0,0,237,243,1,0,0,0,238,239,5,7,0,0,239,240,3,2,1,0,240,241,
		5,8,0,0,241,243,1,0,0,0,242,234,1,0,0,0,242,238,1,0,0,0,243,254,1,0,0,
		0,244,245,5,20,0,0,245,246,3,12,6,0,246,247,3,38,19,0,247,254,1,0,0,0,
		248,249,7,0,0,0,249,250,5,20,0,0,250,251,5,59,0,0,251,254,3,38,19,0,252,
		254,3,6,3,0,253,90,1,0,0,0,253,91,1,0,0,0,253,95,1,0,0,0,253,96,1,0,0,
		0,253,97,1,0,0,0,253,98,1,0,0,0,253,108,1,0,0,0,253,110,1,0,0,0,253,124,
		1,0,0,0,253,137,1,0,0,0,253,188,1,0,0,0,253,210,1,0,0,0,253,228,1,0,0,
		0,253,244,1,0,0,0,253,248,1,0,0,0,253,252,1,0,0,0,254,5,1,0,0,0,255,256,
		5,23,0,0,256,257,5,59,0,0,257,259,5,10,0,0,258,260,3,18,9,0,259,258,1,
		0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,265,5,11,0,0,262,263,5,23,0,
		0,263,265,5,59,0,0,264,255,1,0,0,0,264,262,1,0,0,0,265,7,1,0,0,0,266,268,
		5,24,0,0,267,269,3,18,9,0,268,267,1,0,0,0,268,269,1,0,0,0,269,276,1,0,
		0,0,270,276,5,3,0,0,271,273,5,25,0,0,272,274,5,1,0,0,273,272,1,0,0,0,273,
		274,1,0,0,0,274,276,1,0,0,0,275,266,1,0,0,0,275,270,1,0,0,0,275,271,1,
		0,0,0,276,9,1,0,0,0,277,278,5,26,0,0,278,279,5,59,0,0,279,280,5,26,0,0,
		280,11,1,0,0,0,281,286,5,59,0,0,282,283,5,27,0,0,283,285,5,59,0,0,284,
		282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,291,1,
		0,0,0,288,286,1,0,0,0,289,290,5,28,0,0,290,292,5,59,0,0,291,289,1,0,0,
		0,291,292,1,0,0,0,292,13,1,0,0,0,293,298,3,28,14,0,294,295,5,18,0,0,295,
		297,3,28,14,0,296,294,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,
		1,0,0,0,299,15,1,0,0,0,300,298,1,0,0,0,301,306,5,59,0,0,302,303,5,18,0,
		0,303,305,5,59,0,0,304,302,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,
		307,1,0,0,0,307,17,1,0,0,0,308,306,1,0,0,0,309,310,3,20,10,0,310,311,5,
		18,0,0,311,313,1,0,0,0,312,309,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,
		314,315,1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,318,3,20,10,0,318,
		19,1,0,0,0,319,320,6,10,-1,0,320,335,5,29,0,0,321,335,5,30,0,0,322,335,
		5,31,0,0,323,335,5,32,0,0,324,335,3,74,37,0,325,335,3,76,38,0,326,335,
		5,33,0,0,327,335,3,36,18,0,328,335,3,22,11,0,329,335,3,48,24,0,330,335,
		3,42,21,0,331,332,3,70,35,0,332,333,3,20,10,8,333,335,1,0,0,0,334,319,
		1,0,0,0,334,321,1,0,0,0,334,322,1,0,0,0,334,323,1,0,0,0,334,324,1,0,0,
		0,334,325,1,0,0,0,334,326,1,0,0,0,334,327,1,0,0,0,334,328,1,0,0,0,334,
		329,1,0,0,0,334,330,1,0,0,0,334,331,1,0,0,0,335,370,1,0,0,0,336,337,10,
		9,0,0,337,338,3,72,36,0,338,339,3,20,10,9,339,369,1,0,0,0,340,341,10,7,
		0,0,341,342,3,66,33,0,342,343,3,20,10,8,343,369,1,0,0,0,344,345,10,6,0,
		0,345,346,3,64,32,0,346,347,3,20,10,7,347,369,1,0,0,0,348,349,10,5,0,0,
		349,350,3,62,31,0,350,351,3,20,10,5,351,369,1,0,0,0,352,353,10,4,0,0,353,
		354,3,60,30,0,354,355,3,20,10,5,355,369,1,0,0,0,356,357,10,3,0,0,357,358,
		3,58,29,0,358,359,3,20,10,4,359,369,1,0,0,0,360,361,10,2,0,0,361,362,3,
		56,28,0,362,363,3,20,10,3,363,369,1,0,0,0,364,365,10,1,0,0,365,366,3,68,
		34,0,366,367,3,20,10,2,367,369,1,0,0,0,368,336,1,0,0,0,368,340,1,0,0,0,
		368,344,1,0,0,0,368,348,1,0,0,0,368,352,1,0,0,0,368,356,1,0,0,0,368,360,
		1,0,0,0,368,364,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,
		0,371,21,1,0,0,0,372,370,1,0,0,0,373,377,3,26,13,0,374,376,3,32,16,0,375,
		374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,23,1,0,
		0,0,379,377,1,0,0,0,380,382,3,26,13,0,381,383,3,32,16,0,382,381,1,0,0,
		0,383,384,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,25,1,0,0,0,386,392,
		3,28,14,0,387,388,5,10,0,0,388,389,3,20,10,0,389,390,5,11,0,0,390,392,
		1,0,0,0,391,386,1,0,0,0,391,387,1,0,0,0,392,27,1,0,0,0,393,400,5,59,0,
		0,394,395,5,10,0,0,395,396,3,20,10,0,396,397,5,11,0,0,397,398,3,30,15,
		0,398,400,1,0,0,0,399,393,1,0,0,0,399,394,1,0,0,0,400,404,1,0,0,0,401,
		403,3,30,15,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,
		1,0,0,0,405,29,1,0,0,0,406,404,1,0,0,0,407,409,3,32,16,0,408,407,1,0,0,
		0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,419,1,0,0,0,412,
		410,1,0,0,0,413,414,5,34,0,0,414,415,3,20,10,0,415,416,5,35,0,0,416,420,
		1,0,0,0,417,418,5,27,0,0,418,420,5,59,0,0,419,413,1,0,0,0,419,417,1,0,
		0,0,420,31,1,0,0,0,421,422,5,28,0,0,422,424,5,59,0,0,423,421,1,0,0,0,423,
		424,1,0,0,0,424,425,1,0,0,0,425,426,3,34,17,0,426,33,1,0,0,0,427,429,5,
		10,0,0,428,430,3,18,9,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,
		0,431,436,5,11,0,0,432,436,3,48,24,0,433,436,3,42,21,0,434,436,3,76,38,
		0,435,427,1,0,0,0,435,432,1,0,0,0,435,433,1,0,0,0,435,434,1,0,0,0,436,
		35,1,0,0,0,437,438,5,20,0,0,438,439,3,38,19,0,439,37,1,0,0,0,440,442,5,
		10,0,0,441,443,3,40,20,0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,
		0,444,452,5,11,0,0,445,446,5,5,0,0,446,447,3,2,1,0,447,448,5,6,0,0,448,
		453,1,0,0,0,449,450,3,2,1,0,450,451,5,8,0,0,451,453,1,0,0,0,452,445,1,
		0,0,0,452,449,1,0,0,0,453,39,1,0,0,0,454,457,3,16,8,0,455,456,5,18,0,0,
		456,458,5,33,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,461,1,0,0,0,459,461,
		5,33,0,0,460,454,1,0,0,0,460,459,1,0,0,0,461,41,1,0,0,0,462,464,5,5,0,
		0,463,465,3,44,22,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,
		467,5,6,0,0,467,43,1,0,0,0,468,474,3,46,23,0,469,470,3,54,27,0,470,471,
		3,46,23,0,471,473,1,0,0,0,472,469,1,0,0,0,473,476,1,0,0,0,474,472,1,0,
		0,0,474,475,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,477,479,3,54,27,0,
		478,477,1,0,0,0,478,479,1,0,0,0,479,45,1,0,0,0,480,481,5,59,0,0,481,482,
		5,2,0,0,482,483,3,20,10,0,483,47,1,0,0,0,484,486,5,34,0,0,485,487,3,50,
		25,0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,489,5,35,0,0,
		489,49,1,0,0,0,490,496,3,52,26,0,491,492,3,54,27,0,492,493,3,52,26,0,493,
		495,1,0,0,0,494,491,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,1,
		0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,499,501,3,54,27,0,500,499,1,0,0,
		0,500,501,1,0,0,0,501,51,1,0,0,0,502,503,3,20,10,0,503,53,1,0,0,0,504,
		505,5,18,0,0,505,55,1,0,0,0,506,507,5,36,0,0,507,57,1,0,0,0,508,509,5,
		37,0,0,509,59,1,0,0,0,510,511,7,1,0,0,511,61,1,0,0,0,512,513,5,45,0,0,
		513,63,1,0,0,0,514,515,7,2,0,0,515,65,1,0,0,0,516,517,7,3,0,0,517,67,1,
		0,0,0,518,519,7,4,0,0,519,69,1,0,0,0,520,521,7,5,0,0,521,71,1,0,0,0,522,
		523,5,58,0,0,523,73,1,0,0,0,524,525,7,6,0,0,525,75,1,0,0,0,526,527,7,7,
		0,0,527,77,1,0,0,0,48,84,88,108,122,130,155,163,177,182,186,197,208,226,
		242,253,259,264,268,273,275,286,291,298,306,314,334,368,370,377,384,391,
		399,404,410,419,423,429,435,442,452,457,460,464,474,478,486,496,500
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrTests.NekoScript
