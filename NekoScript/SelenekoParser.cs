//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/sneakyanimeow/RiderProjects/AntlrTests/NekoScript/Seleneko.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrTests.NekoScript {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class SelenekoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, NAME=59, NORMALSTRING=60, 
		CHARSTRING=61, LONGSTRING=62, INT=63, HEX=64, FLOAT=65, HEX_FLOAT=66, 
		COMMENT=67, LINE_COMMENT=68, WS=69, SHEBANG=70;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_native_call = 3, RULE_attnamelist = 4, 
		RULE_attrib = 5, RULE_laststat = 6, RULE_label = 7, RULE_funcname = 8, 
		RULE_varlist = 9, RULE_namelist = 10, RULE_explist = 11, RULE_exp = 12, 
		RULE_prefixexp = 13, RULE_functioncall = 14, RULE_varOrExp = 15, RULE_var = 16, 
		RULE_varSuffix = 17, RULE_nameAndArgs = 18, RULE_args = 19, RULE_functiondef = 20, 
		RULE_funcbody = 21, RULE_parlist = 22, RULE_tableconstructor = 23, RULE_fieldlist = 24, 
		RULE_field = 25, RULE_fieldsep = 26, RULE_operatorOr = 27, RULE_operatorAnd = 28, 
		RULE_operatorComparison = 29, RULE_operatorStrcat = 30, RULE_operatorAddSub = 31, 
		RULE_operatorMulDivMod = 32, RULE_operatorBitwise = 33, RULE_operatorUnary = 34, 
		RULE_operatorPower = 35, RULE_number = 36, RULE_string = 37;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "native_call", "attnamelist", "attrib", "laststat", 
		"label", "funcname", "varlist", "namelist", "explist", "exp", "prefixexp", 
		"functioncall", "varOrExp", "var", "varSuffix", "nameAndArgs", "args", 
		"functiondef", "funcbody", "parlist", "tableconstructor", "fieldlist", 
		"field", "fieldsep", "operatorOr", "operatorAnd", "operatorComparison", 
		"operatorStrcat", "operatorAddSub", "operatorMulDivMod", "operatorBitwise", 
		"operatorUnary", "operatorPower", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'goto'", "'{'", "'}'", "'do'", "'end'", 
		"'while'", "'('", "')'", "'repeat'", "'until'", "'if'", "'else'", "'then'", 
		"'for'", "','", "'in'", "'function'", "'let'", "'local'", "'~'", "'<'", 
		"'>'", "'return'", "'continue'", "'::'", "'.'", "':'", "'null'", "'nil'", 
		"'false'", "'true'", "'...'", "'['", "']'", "'or'", "'and'", "'<='", "'>='", 
		"'!='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", "'/'", "'%'", "'//'", 
		"'&'", "'|'", "'<<'", "'>>'", "'not'", "'#'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "NAME", 
		"NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", 
		"COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Seleneko.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SelenekoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SelenekoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SelenekoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SelenekoParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			block();
			State = 77;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LaststatContext laststat() {
			return GetRuleContext<LaststatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 79;
					stat();
					}
					} 
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 201326600L) != 0)) {
				{
				State = 85;
				laststat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttnamelistContext attnamelist() {
			return GetRuleContext<AttnamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Native_callContext native_call() {
			return GetRuleContext<Native_callContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			int _alt;
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				varlist();
				State = 90;
				Match(T__1);
				State = 91;
				explist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94;
				label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95;
				Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96;
				Match(T__3);
				State = 97;
				Match(NAME);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 98;
					Match(T__4);
					State = 99;
					block();
					State = 100;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 102;
					Match(T__6);
					State = 103;
					block();
					State = 104;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 108;
				Match(T__8);
				State = 109;
				Match(T__9);
				State = 110;
				exp(0);
				State = 111;
				Match(T__10);
				State = 120;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 112;
					Match(T__4);
					State = 113;
					block();
					State = 114;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 116;
					Match(T__6);
					State = 117;
					block();
					State = 118;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 122;
				Match(T__11);
				State = 128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 123;
					Match(T__4);
					State = 124;
					block();
					State = 125;
					Match(T__5);
					}
					break;
				case 2:
					{
					State = 127;
					block();
					}
					break;
				}
				State = 130;
				Match(T__12);
				State = 131;
				Match(T__9);
				State = 132;
				exp(0);
				State = 133;
				Match(T__10);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 135;
				Match(T__13);
				State = 136;
				Match(T__9);
				State = 137;
				exp(0);
				State = 138;
				Match(T__10);
				State = 184;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 139;
					Match(T__4);
					State = 140;
					block();
					State = 141;
					Match(T__5);
					State = 153;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 142;
							Match(T__14);
							State = 143;
							Match(T__13);
							State = 144;
							Match(T__9);
							State = 145;
							exp(0);
							State = 146;
							Match(T__10);
							State = 147;
							Match(T__4);
							State = 148;
							block();
							State = 149;
							Match(T__5);
							}
							} 
						}
						State = 155;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					}
					State = 161;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 156;
						Match(T__14);
						State = 157;
						Match(T__4);
						State = 158;
						block();
						State = 159;
						Match(T__5);
						}
						break;
					}
					}
					break;
				case T__15:
					{
					State = 163;
					Match(T__15);
					State = 164;
					block();
					State = 175;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 165;
							Match(T__14);
							State = 166;
							Match(T__13);
							State = 167;
							Match(T__9);
							State = 168;
							exp(0);
							State = 169;
							Match(T__10);
							State = 170;
							Match(T__15);
							State = 171;
							block();
							}
							} 
						}
						State = 177;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__14) {
						{
						State = 178;
						Match(T__14);
						State = 179;
						block();
						}
					}

					State = 182;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 186;
				Match(T__16);
				State = 187;
				Match(T__9);
				State = 188;
				Match(NAME);
				State = 189;
				Match(T__1);
				State = 190;
				exp(0);
				State = 191;
				Match(T__17);
				State = 192;
				exp(0);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 193;
					Match(T__17);
					State = 194;
					exp(0);
					}
				}

				State = 197;
				Match(T__10);
				State = 206;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 198;
					Match(T__4);
					State = 199;
					block();
					State = 200;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 202;
					Match(T__6);
					State = 203;
					block();
					State = 204;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 208;
				Match(T__16);
				State = 209;
				Match(T__9);
				State = 210;
				stat();
				State = 211;
				Match(T__0);
				State = 212;
				exp(0);
				State = 213;
				Match(T__0);
				State = 214;
				stat();
				State = 215;
				Match(T__10);
				State = 224;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 216;
					Match(T__4);
					State = 217;
					block();
					State = 218;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 220;
					Match(T__6);
					State = 221;
					block();
					State = 222;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 226;
				Match(T__16);
				State = 227;
				Match(T__9);
				State = 228;
				namelist();
				State = 229;
				Match(T__18);
				State = 230;
				explist();
				State = 231;
				Match(T__10);
				State = 240;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 232;
					Match(T__4);
					State = 233;
					block();
					State = 234;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 236;
					Match(T__6);
					State = 237;
					block();
					State = 238;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 242;
				Match(T__19);
				State = 243;
				funcname();
				State = 244;
				funcbody();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 246;
				_la = TokenStream.LA(1);
				if ( !(_la==T__20 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 247;
				Match(T__19);
				State = 248;
				Match(NAME);
				State = 249;
				funcbody();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 250;
				_la = TokenStream.LA(1);
				if ( !(_la==T__20 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 251;
				attnamelist();
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 252;
					Match(T__1);
					State = 253;
					explist();
					}
				}

				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 256;
				native_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Native_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNative_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNative_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_callContext native_call() {
		Native_callContext _localctx = new Native_callContext(Context, State);
		EnterRule(_localctx, 6, RULE_native_call);
		int _la;
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				Match(T__22);
				State = 260;
				Match(NAME);
				State = 261;
				Match(T__9);
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431419486142497L) != 0)) {
					{
					State = 262;
					explist();
					}
				}

				State = 265;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				Match(T__22);
				State = 267;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttnamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SelenekoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SelenekoParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		public AttnamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attnamelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterAttnamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitAttnamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttnamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttnamelistContext attnamelist() {
		AttnamelistContext _localctx = new AttnamelistContext(Context, State);
		EnterRule(_localctx, 8, RULE_attnamelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(NAME);
			State = 271;
			attrib();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 272;
				Match(T__17);
				State = 273;
				Match(NAME);
				State = 274;
				attrib();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 10, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 280;
				Match(T__23);
				State = 281;
				Match(NAME);
				State = 282;
				Match(T__24);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LaststatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LaststatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_laststat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLaststat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LaststatContext laststat() {
		LaststatContext _localctx = new LaststatContext(Context, State);
		EnterRule(_localctx, 12, RULE_laststat);
		int _la;
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				Match(T__25);
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431419486142497L) != 0)) {
					{
					State = 286;
					explist();
					}
				}

				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289;
				Match(T__2);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 3);
				{
				State = 290;
				Match(T__26);
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 291;
					Match(T__0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(T__27);
			State = 297;
			Match(NAME);
			State = 298;
			Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SelenekoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SelenekoParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 16, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(NAME);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__28) {
				{
				{
				State = 301;
				Match(T__28);
				State = 302;
				Match(NAME);
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 308;
				Match(T__29);
				State = 309;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 18, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			var();
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 313;
				Match(T__17);
				State = 314;
				var();
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SelenekoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SelenekoParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 20, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(NAME);
			State = 325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 321;
					Match(T__17);
					State = 322;
					Match(NAME);
					}
					} 
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 22, RULE_explist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 328;
					exp(0);
					State = 329;
					Match(T__17);
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 336;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__30:
				{
				State = 339;
				Match(T__30);
				}
				break;
			case T__31:
				{
				State = 340;
				Match(T__31);
				}
				break;
			case T__32:
				{
				State = 341;
				Match(T__32);
				}
				break;
			case T__33:
				{
				State = 342;
				Match(T__33);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 343;
				number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 344;
				@string();
				}
				break;
			case T__34:
				{
				State = 345;
				Match(T__34);
				}
				break;
			case T__19:
				{
				State = 346;
				functiondef();
				}
				break;
			case T__9:
			case NAME:
				{
				State = 347;
				prefixexp();
				}
				break;
			case T__4:
				{
				State = 348;
				tableconstructor();
				}
				break;
			case T__22:
			case T__46:
			case T__55:
			case T__56:
				{
				State = 349;
				operatorUnary();
				State = 350;
				exp(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 388;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 386;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 354;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 355;
						operatorPower();
						State = 356;
						exp(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 358;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 359;
						operatorMulDivMod();
						State = 360;
						exp(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 362;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 363;
						operatorAddSub();
						State = 364;
						exp(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 366;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 367;
						operatorStrcat();
						State = 368;
						exp(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 370;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 371;
						operatorComparison();
						State = 372;
						exp(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 374;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 375;
						operatorAnd();
						State = 376;
						exp(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 378;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 379;
						operatorOr();
						State = 380;
						exp(3);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 382;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 383;
						operatorBitwise();
						State = 384;
						exp(2);
						}
						break;
					}
					} 
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 26, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			varOrExp();
			State = 395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 392;
					nameAndArgs();
					}
					} 
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 28, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			varOrExp();
			State = 400;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 399;
					nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 30, RULE_varOrExp);
		try {
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				Match(T__9);
				State = 406;
				exp(0);
				State = 407;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 32, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 411;
				Match(NAME);
				}
				break;
			case T__9:
				{
				State = 412;
				Match(T__9);
				State = 413;
				exp(0);
				State = 414;
				Match(T__10);
				State = 415;
				varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 422;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 419;
					varSuffix();
					}
					} 
				}
				State = 424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 34, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070450533321671712L) != 0)) {
				{
				{
				State = 425;
				nameAndArgs();
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
				{
				State = 431;
				Match(T__35);
				State = 432;
				exp(0);
				State = 433;
				Match(T__36);
				}
				break;
			case T__28:
				{
				State = 435;
				Match(T__28);
				State = 436;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 36, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 439;
				Match(T__29);
				State = 440;
				Match(NAME);
				}
			}

			State = 443;
			args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 38, RULE_args);
		int _la;
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				Match(T__9);
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431419486142497L) != 0)) {
					{
					State = 446;
					explist();
					}
				}

				State = 449;
				Match(T__10);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450;
				tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 451;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 40, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(T__19);
			State = 455;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			Match(T__9);
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__34 || _la==NAME) {
				{
				State = 458;
				parlist();
				}
			}

			State = 461;
			Match(T__10);
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 462;
				Match(T__4);
				State = 463;
				block();
				State = 464;
				Match(T__5);
				}
				break;
			case 2:
				{
				State = 466;
				block();
				State = 467;
				Match(T__7);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 44, RULE_parlist);
		int _la;
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				namelist();
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 472;
					Match(T__17);
					State = 473;
					Match(T__34);
					}
				}

				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				Match(T__34);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 46, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(T__4);
			State = 481;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431421633626145L) != 0)) {
				{
				State = 480;
				fieldlist();
				}
			}

			State = 483;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 48, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			field();
			State = 491;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 486;
					fieldsep();
					State = 487;
					field();
					}
					} 
				}
				State = 493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__17) {
				{
				State = 494;
				fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 50, RULE_field);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 497;
				Match(T__35);
				State = 498;
				exp(0);
				State = 499;
				Match(T__36);
				State = 500;
				Match(T__1);
				State = 501;
				exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503;
				Match(NAME);
				State = 504;
				Match(T__1);
				State = 505;
				exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 506;
				exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 54, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(T__37);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 56, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 58, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34084910792704L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 60, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 62, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			_la = TokenStream.LA(1);
			if ( !(_la==T__45 || _la==T__46) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 64, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4222124650659840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 66, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67553994418946048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 68, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 216313519610527744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 70, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SelenekoParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(SelenekoParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SelenekoParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT() { return GetToken(SelenekoParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 72, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(SelenekoParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSTRING() { return GetToken(SelenekoParser.CHARSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(SelenekoParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 74, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070450532247928832L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,70,534,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,1,5,1,81,8,1,10,1,12,1,84,9,1,1,1,3,
		1,87,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,3,2,107,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		3,2,121,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,129,8,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,152,
		8,2,10,2,12,2,155,9,2,1,2,1,2,1,2,1,2,1,2,3,2,162,8,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,5,2,174,8,2,10,2,12,2,177,9,2,1,2,1,2,3,2,181,
		8,2,1,2,1,2,3,2,185,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,196,8,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,207,8,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,225,8,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,241,8,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,255,8,2,1,2,3,2,258,8,2,1,3,1,3,1,
		3,1,3,3,3,264,8,3,1,3,1,3,1,3,3,3,269,8,3,1,4,1,4,1,4,1,4,1,4,5,4,276,
		8,4,10,4,12,4,279,9,4,1,5,1,5,1,5,3,5,284,8,5,1,6,1,6,3,6,288,8,6,1,6,
		1,6,1,6,3,6,293,8,6,3,6,295,8,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,304,8,
		8,10,8,12,8,307,9,8,1,8,1,8,3,8,311,8,8,1,9,1,9,1,9,5,9,316,8,9,10,9,12,
		9,319,9,9,1,10,1,10,1,10,5,10,324,8,10,10,10,12,10,327,9,10,1,11,1,11,
		1,11,5,11,332,8,11,10,11,12,11,335,9,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,353,8,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,5,12,387,8,12,10,12,12,12,390,9,12,1,13,1,13,5,13,394,8,13,
		10,13,12,13,397,9,13,1,14,1,14,4,14,401,8,14,11,14,12,14,402,1,15,1,15,
		1,15,1,15,1,15,3,15,410,8,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,418,8,
		16,1,16,5,16,421,8,16,10,16,12,16,424,9,16,1,17,5,17,427,8,17,10,17,12,
		17,430,9,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,438,8,17,1,18,1,18,3,18,
		442,8,18,1,18,1,18,1,19,1,19,3,19,448,8,19,1,19,1,19,1,19,3,19,453,8,19,
		1,20,1,20,1,20,1,21,1,21,3,21,460,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,3,21,470,8,21,1,22,1,22,1,22,3,22,475,8,22,1,22,3,22,478,8,22,
		1,23,1,23,3,23,482,8,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,490,8,24,10,
		24,12,24,493,9,24,1,24,3,24,496,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
		1,25,1,25,1,25,3,25,508,8,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
		30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
		37,1,37,1,37,0,1,24,38,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,0,9,1,0,21,
		22,2,0,1,1,18,18,2,0,24,25,40,44,1,0,46,47,1,0,48,51,2,0,23,23,52,55,3,
		0,23,23,47,47,56,57,1,0,63,66,1,0,60,62,577,0,76,1,0,0,0,2,82,1,0,0,0,
		4,257,1,0,0,0,6,268,1,0,0,0,8,270,1,0,0,0,10,283,1,0,0,0,12,294,1,0,0,
		0,14,296,1,0,0,0,16,300,1,0,0,0,18,312,1,0,0,0,20,320,1,0,0,0,22,333,1,
		0,0,0,24,352,1,0,0,0,26,391,1,0,0,0,28,398,1,0,0,0,30,409,1,0,0,0,32,417,
		1,0,0,0,34,428,1,0,0,0,36,441,1,0,0,0,38,452,1,0,0,0,40,454,1,0,0,0,42,
		457,1,0,0,0,44,477,1,0,0,0,46,479,1,0,0,0,48,485,1,0,0,0,50,507,1,0,0,
		0,52,509,1,0,0,0,54,511,1,0,0,0,56,513,1,0,0,0,58,515,1,0,0,0,60,517,1,
		0,0,0,62,519,1,0,0,0,64,521,1,0,0,0,66,523,1,0,0,0,68,525,1,0,0,0,70,527,
		1,0,0,0,72,529,1,0,0,0,74,531,1,0,0,0,76,77,3,2,1,0,77,78,5,0,0,1,78,1,
		1,0,0,0,79,81,3,4,2,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,
		1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,85,87,3,12,6,0,86,85,1,0,0,0,86,87,
		1,0,0,0,87,3,1,0,0,0,88,258,5,1,0,0,89,90,3,18,9,0,90,91,5,2,0,0,91,92,
		3,22,11,0,92,258,1,0,0,0,93,258,3,28,14,0,94,258,3,14,7,0,95,258,5,3,0,
		0,96,97,5,4,0,0,97,258,5,59,0,0,98,99,5,5,0,0,99,100,3,2,1,0,100,101,5,
		6,0,0,101,107,1,0,0,0,102,103,5,7,0,0,103,104,3,2,1,0,104,105,5,8,0,0,
		105,107,1,0,0,0,106,98,1,0,0,0,106,102,1,0,0,0,107,258,1,0,0,0,108,109,
		5,9,0,0,109,110,5,10,0,0,110,111,3,24,12,0,111,120,5,11,0,0,112,113,5,
		5,0,0,113,114,3,2,1,0,114,115,5,6,0,0,115,121,1,0,0,0,116,117,5,7,0,0,
		117,118,3,2,1,0,118,119,5,8,0,0,119,121,1,0,0,0,120,112,1,0,0,0,120,116,
		1,0,0,0,121,258,1,0,0,0,122,128,5,12,0,0,123,124,5,5,0,0,124,125,3,2,1,
		0,125,126,5,6,0,0,126,129,1,0,0,0,127,129,3,2,1,0,128,123,1,0,0,0,128,
		127,1,0,0,0,129,130,1,0,0,0,130,131,5,13,0,0,131,132,5,10,0,0,132,133,
		3,24,12,0,133,134,5,11,0,0,134,258,1,0,0,0,135,136,5,14,0,0,136,137,5,
		10,0,0,137,138,3,24,12,0,138,184,5,11,0,0,139,140,5,5,0,0,140,141,3,2,
		1,0,141,153,5,6,0,0,142,143,5,15,0,0,143,144,5,14,0,0,144,145,5,10,0,0,
		145,146,3,24,12,0,146,147,5,11,0,0,147,148,5,5,0,0,148,149,3,2,1,0,149,
		150,5,6,0,0,150,152,1,0,0,0,151,142,1,0,0,0,152,155,1,0,0,0,153,151,1,
		0,0,0,153,154,1,0,0,0,154,161,1,0,0,0,155,153,1,0,0,0,156,157,5,15,0,0,
		157,158,5,5,0,0,158,159,3,2,1,0,159,160,5,6,0,0,160,162,1,0,0,0,161,156,
		1,0,0,0,161,162,1,0,0,0,162,185,1,0,0,0,163,164,5,16,0,0,164,175,3,2,1,
		0,165,166,5,15,0,0,166,167,5,14,0,0,167,168,5,10,0,0,168,169,3,24,12,0,
		169,170,5,11,0,0,170,171,5,16,0,0,171,172,3,2,1,0,172,174,1,0,0,0,173,
		165,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,180,1,
		0,0,0,177,175,1,0,0,0,178,179,5,15,0,0,179,181,3,2,1,0,180,178,1,0,0,0,
		180,181,1,0,0,0,181,182,1,0,0,0,182,183,5,8,0,0,183,185,1,0,0,0,184,139,
		1,0,0,0,184,163,1,0,0,0,185,258,1,0,0,0,186,187,5,17,0,0,187,188,5,10,
		0,0,188,189,5,59,0,0,189,190,5,2,0,0,190,191,3,24,12,0,191,192,5,18,0,
		0,192,195,3,24,12,0,193,194,5,18,0,0,194,196,3,24,12,0,195,193,1,0,0,0,
		195,196,1,0,0,0,196,197,1,0,0,0,197,206,5,11,0,0,198,199,5,5,0,0,199,200,
		3,2,1,0,200,201,5,6,0,0,201,207,1,0,0,0,202,203,5,7,0,0,203,204,3,2,1,
		0,204,205,5,8,0,0,205,207,1,0,0,0,206,198,1,0,0,0,206,202,1,0,0,0,207,
		258,1,0,0,0,208,209,5,17,0,0,209,210,5,10,0,0,210,211,3,4,2,0,211,212,
		5,1,0,0,212,213,3,24,12,0,213,214,5,1,0,0,214,215,3,4,2,0,215,224,5,11,
		0,0,216,217,5,5,0,0,217,218,3,2,1,0,218,219,5,6,0,0,219,225,1,0,0,0,220,
		221,5,7,0,0,221,222,3,2,1,0,222,223,5,8,0,0,223,225,1,0,0,0,224,216,1,
		0,0,0,224,220,1,0,0,0,225,258,1,0,0,0,226,227,5,17,0,0,227,228,5,10,0,
		0,228,229,3,20,10,0,229,230,5,19,0,0,230,231,3,22,11,0,231,240,5,11,0,
		0,232,233,5,5,0,0,233,234,3,2,1,0,234,235,5,6,0,0,235,241,1,0,0,0,236,
		237,5,7,0,0,237,238,3,2,1,0,238,239,5,8,0,0,239,241,1,0,0,0,240,232,1,
		0,0,0,240,236,1,0,0,0,241,258,1,0,0,0,242,243,5,20,0,0,243,244,3,16,8,
		0,244,245,3,42,21,0,245,258,1,0,0,0,246,247,7,0,0,0,247,248,5,20,0,0,248,
		249,5,59,0,0,249,258,3,42,21,0,250,251,7,0,0,0,251,254,3,8,4,0,252,253,
		5,2,0,0,253,255,3,22,11,0,254,252,1,0,0,0,254,255,1,0,0,0,255,258,1,0,
		0,0,256,258,3,6,3,0,257,88,1,0,0,0,257,89,1,0,0,0,257,93,1,0,0,0,257,94,
		1,0,0,0,257,95,1,0,0,0,257,96,1,0,0,0,257,106,1,0,0,0,257,108,1,0,0,0,
		257,122,1,0,0,0,257,135,1,0,0,0,257,186,1,0,0,0,257,208,1,0,0,0,257,226,
		1,0,0,0,257,242,1,0,0,0,257,246,1,0,0,0,257,250,1,0,0,0,257,256,1,0,0,
		0,258,5,1,0,0,0,259,260,5,23,0,0,260,261,5,59,0,0,261,263,5,10,0,0,262,
		264,3,22,11,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,269,
		5,11,0,0,266,267,5,23,0,0,267,269,5,59,0,0,268,259,1,0,0,0,268,266,1,0,
		0,0,269,7,1,0,0,0,270,271,5,59,0,0,271,277,3,10,5,0,272,273,5,18,0,0,273,
		274,5,59,0,0,274,276,3,10,5,0,275,272,1,0,0,0,276,279,1,0,0,0,277,275,
		1,0,0,0,277,278,1,0,0,0,278,9,1,0,0,0,279,277,1,0,0,0,280,281,5,24,0,0,
		281,282,5,59,0,0,282,284,5,25,0,0,283,280,1,0,0,0,283,284,1,0,0,0,284,
		11,1,0,0,0,285,287,5,26,0,0,286,288,3,22,11,0,287,286,1,0,0,0,287,288,
		1,0,0,0,288,295,1,0,0,0,289,295,5,3,0,0,290,292,5,27,0,0,291,293,5,1,0,
		0,292,291,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,285,1,0,0,0,294,
		289,1,0,0,0,294,290,1,0,0,0,295,13,1,0,0,0,296,297,5,28,0,0,297,298,5,
		59,0,0,298,299,5,28,0,0,299,15,1,0,0,0,300,305,5,59,0,0,301,302,5,29,0,
		0,302,304,5,59,0,0,303,301,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,
		306,1,0,0,0,306,310,1,0,0,0,307,305,1,0,0,0,308,309,5,30,0,0,309,311,5,
		59,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,17,1,0,0,0,312,317,3,32,16,
		0,313,314,5,18,0,0,314,316,3,32,16,0,315,313,1,0,0,0,316,319,1,0,0,0,317,
		315,1,0,0,0,317,318,1,0,0,0,318,19,1,0,0,0,319,317,1,0,0,0,320,325,5,59,
		0,0,321,322,5,18,0,0,322,324,5,59,0,0,323,321,1,0,0,0,324,327,1,0,0,0,
		325,323,1,0,0,0,325,326,1,0,0,0,326,21,1,0,0,0,327,325,1,0,0,0,328,329,
		3,24,12,0,329,330,5,18,0,0,330,332,1,0,0,0,331,328,1,0,0,0,332,335,1,0,
		0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,
		337,3,24,12,0,337,23,1,0,0,0,338,339,6,12,-1,0,339,353,5,31,0,0,340,353,
		5,32,0,0,341,353,5,33,0,0,342,353,5,34,0,0,343,353,3,72,36,0,344,353,3,
		74,37,0,345,353,5,35,0,0,346,353,3,40,20,0,347,353,3,26,13,0,348,353,3,
		46,23,0,349,350,3,68,34,0,350,351,3,24,12,8,351,353,1,0,0,0,352,338,1,
		0,0,0,352,340,1,0,0,0,352,341,1,0,0,0,352,342,1,0,0,0,352,343,1,0,0,0,
		352,344,1,0,0,0,352,345,1,0,0,0,352,346,1,0,0,0,352,347,1,0,0,0,352,348,
		1,0,0,0,352,349,1,0,0,0,353,388,1,0,0,0,354,355,10,9,0,0,355,356,3,70,
		35,0,356,357,3,24,12,9,357,387,1,0,0,0,358,359,10,7,0,0,359,360,3,64,32,
		0,360,361,3,24,12,8,361,387,1,0,0,0,362,363,10,6,0,0,363,364,3,62,31,0,
		364,365,3,24,12,7,365,387,1,0,0,0,366,367,10,5,0,0,367,368,3,60,30,0,368,
		369,3,24,12,5,369,387,1,0,0,0,370,371,10,4,0,0,371,372,3,58,29,0,372,373,
		3,24,12,5,373,387,1,0,0,0,374,375,10,3,0,0,375,376,3,56,28,0,376,377,3,
		24,12,4,377,387,1,0,0,0,378,379,10,2,0,0,379,380,3,54,27,0,380,381,3,24,
		12,3,381,387,1,0,0,0,382,383,10,1,0,0,383,384,3,66,33,0,384,385,3,24,12,
		2,385,387,1,0,0,0,386,354,1,0,0,0,386,358,1,0,0,0,386,362,1,0,0,0,386,
		366,1,0,0,0,386,370,1,0,0,0,386,374,1,0,0,0,386,378,1,0,0,0,386,382,1,
		0,0,0,387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,25,1,0,0,0,390,
		388,1,0,0,0,391,395,3,30,15,0,392,394,3,36,18,0,393,392,1,0,0,0,394,397,
		1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,27,1,0,0,0,397,395,1,0,0,0,
		398,400,3,30,15,0,399,401,3,36,18,0,400,399,1,0,0,0,401,402,1,0,0,0,402,
		400,1,0,0,0,402,403,1,0,0,0,403,29,1,0,0,0,404,410,3,32,16,0,405,406,5,
		10,0,0,406,407,3,24,12,0,407,408,5,11,0,0,408,410,1,0,0,0,409,404,1,0,
		0,0,409,405,1,0,0,0,410,31,1,0,0,0,411,418,5,59,0,0,412,413,5,10,0,0,413,
		414,3,24,12,0,414,415,5,11,0,0,415,416,3,34,17,0,416,418,1,0,0,0,417,411,
		1,0,0,0,417,412,1,0,0,0,418,422,1,0,0,0,419,421,3,34,17,0,420,419,1,0,
		0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,33,1,0,0,0,424,
		422,1,0,0,0,425,427,3,36,18,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,
		1,0,0,0,428,429,1,0,0,0,429,437,1,0,0,0,430,428,1,0,0,0,431,432,5,36,0,
		0,432,433,3,24,12,0,433,434,5,37,0,0,434,438,1,0,0,0,435,436,5,29,0,0,
		436,438,5,59,0,0,437,431,1,0,0,0,437,435,1,0,0,0,438,35,1,0,0,0,439,440,
		5,30,0,0,440,442,5,59,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,
		0,0,443,444,3,38,19,0,444,37,1,0,0,0,445,447,5,10,0,0,446,448,3,22,11,
		0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,453,5,11,0,0,450,
		453,3,46,23,0,451,453,3,74,37,0,452,445,1,0,0,0,452,450,1,0,0,0,452,451,
		1,0,0,0,453,39,1,0,0,0,454,455,5,20,0,0,455,456,3,42,21,0,456,41,1,0,0,
		0,457,459,5,10,0,0,458,460,3,44,22,0,459,458,1,0,0,0,459,460,1,0,0,0,460,
		461,1,0,0,0,461,469,5,11,0,0,462,463,5,5,0,0,463,464,3,2,1,0,464,465,5,
		6,0,0,465,470,1,0,0,0,466,467,3,2,1,0,467,468,5,8,0,0,468,470,1,0,0,0,
		469,462,1,0,0,0,469,466,1,0,0,0,470,43,1,0,0,0,471,474,3,20,10,0,472,473,
		5,18,0,0,473,475,5,35,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,478,1,0,
		0,0,476,478,5,35,0,0,477,471,1,0,0,0,477,476,1,0,0,0,478,45,1,0,0,0,479,
		481,5,5,0,0,480,482,3,48,24,0,481,480,1,0,0,0,481,482,1,0,0,0,482,483,
		1,0,0,0,483,484,5,6,0,0,484,47,1,0,0,0,485,491,3,50,25,0,486,487,3,52,
		26,0,487,488,3,50,25,0,488,490,1,0,0,0,489,486,1,0,0,0,490,493,1,0,0,0,
		491,489,1,0,0,0,491,492,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,494,496,
		3,52,26,0,495,494,1,0,0,0,495,496,1,0,0,0,496,49,1,0,0,0,497,498,5,36,
		0,0,498,499,3,24,12,0,499,500,5,37,0,0,500,501,5,2,0,0,501,502,3,24,12,
		0,502,508,1,0,0,0,503,504,5,59,0,0,504,505,5,2,0,0,505,508,3,24,12,0,506,
		508,3,24,12,0,507,497,1,0,0,0,507,503,1,0,0,0,507,506,1,0,0,0,508,51,1,
		0,0,0,509,510,7,1,0,0,510,53,1,0,0,0,511,512,5,38,0,0,512,55,1,0,0,0,513,
		514,5,39,0,0,514,57,1,0,0,0,515,516,7,2,0,0,516,59,1,0,0,0,517,518,5,45,
		0,0,518,61,1,0,0,0,519,520,7,3,0,0,520,63,1,0,0,0,521,522,7,4,0,0,522,
		65,1,0,0,0,523,524,7,5,0,0,524,67,1,0,0,0,525,526,7,6,0,0,526,69,1,0,0,
		0,527,528,5,58,0,0,528,71,1,0,0,0,529,530,7,7,0,0,530,73,1,0,0,0,531,532,
		7,8,0,0,532,75,1,0,0,0,49,82,86,106,120,128,153,161,175,180,184,195,206,
		224,240,254,257,263,268,277,283,287,292,294,305,310,317,325,333,352,386,
		388,395,402,409,417,422,428,437,441,447,452,459,469,474,477,481,491,495,
		507
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrTests.NekoScript
