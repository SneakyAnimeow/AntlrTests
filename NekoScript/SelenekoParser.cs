//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/meow/RiderProjects/AntlrTests/NekoScript\Seleneko.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AntlrTests.NekoScript {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class SelenekoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, NAME=59, NORMALSTRING=60, 
		CHARSTRING=61, LONGSTRING=62, INT=63, HEX=64, FLOAT=65, HEX_FLOAT=66, 
		COMMENT=67, LINE_COMMENT=68, WS=69, SHEBANG=70;
	public const int
		RULE_chunk = 0, RULE_block = 1, RULE_stat = 2, RULE_native_call = 3, RULE_laststat = 4, 
		RULE_label = 5, RULE_funcname = 6, RULE_varlist = 7, RULE_namelist = 8, 
		RULE_explist = 9, RULE_exp = 10, RULE_prefixexp = 11, RULE_functioncall = 12, 
		RULE_varOrExp = 13, RULE_var = 14, RULE_varSuffix = 15, RULE_nameAndArgs = 16, 
		RULE_args = 17, RULE_functiondef = 18, RULE_funcbody = 19, RULE_parlist = 20, 
		RULE_tableconstructor = 21, RULE_fieldlist = 22, RULE_field = 23, RULE_fieldsep = 24, 
		RULE_operatorOr = 25, RULE_operatorAnd = 26, RULE_operatorComparison = 27, 
		RULE_operatorStrcat = 28, RULE_operatorAddSub = 29, RULE_operatorMulDivMod = 30, 
		RULE_operatorBitwise = 31, RULE_operatorUnary = 32, RULE_operatorPower = 33, 
		RULE_number = 34, RULE_string = 35;
	public static readonly string[] ruleNames = {
		"chunk", "block", "stat", "native_call", "laststat", "label", "funcname", 
		"varlist", "namelist", "explist", "exp", "prefixexp", "functioncall", 
		"varOrExp", "var", "varSuffix", "nameAndArgs", "args", "functiondef", 
		"funcbody", "parlist", "tableconstructor", "fieldlist", "field", "fieldsep", 
		"operatorOr", "operatorAnd", "operatorComparison", "operatorStrcat", "operatorAddSub", 
		"operatorMulDivMod", "operatorBitwise", "operatorUnary", "operatorPower", 
		"number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'break'", "'goto'", "'{'", "'}'", "'do'", "'end'", 
		"'while'", "'('", "')'", "'repeat'", "'until'", "'if'", "'else'", "'then'", 
		"'for'", "','", "'in'", "'function'", "'let'", "'local'", "'~'", "'return'", 
		"'continue'", "'::'", "'.'", "':'", "'null'", "'nil'", "'false'", "'true'", 
		"'...'", "'['", "']'", "'or'", "'and'", "'<'", "'>'", "'<='", "'>='", 
		"'!='", "'~='", "'=='", "'..'", "'+'", "'-'", "'*'", "'/'", "'%'", "'//'", 
		"'&'", "'|'", "'<<'", "'>>'", "'not'", "'#'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "NAME", 
		"NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", 
		"COMMENT", "LINE_COMMENT", "WS", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Seleneko.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SelenekoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SelenekoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SelenekoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SelenekoParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			block();
			State = 73;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LaststatContext laststat() {
			return GetRuleContext<LaststatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 75;
					stat();
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50331656L) != 0)) {
				{
				State = 81;
				laststat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Native_callContext native_call() {
			return GetRuleContext<Native_callContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		int _la;
		try {
			int _alt;
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				varlist();
				State = 86;
				Match(T__1);
				State = 87;
				explist();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89;
				functioncall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90;
				label();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 91;
				Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 92;
				Match(T__3);
				State = 93;
				Match(NAME);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 102;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 94;
					Match(T__4);
					State = 95;
					block();
					State = 96;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 98;
					Match(T__6);
					State = 99;
					block();
					State = 100;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				Match(T__8);
				State = 105;
				Match(T__9);
				State = 106;
				exp(0);
				State = 107;
				Match(T__10);
				State = 116;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 108;
					Match(T__4);
					State = 109;
					block();
					State = 110;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 112;
					Match(T__6);
					State = 113;
					block();
					State = 114;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 118;
				Match(T__11);
				State = 124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 119;
					Match(T__4);
					State = 120;
					block();
					State = 121;
					Match(T__5);
					}
					break;
				case 2:
					{
					State = 123;
					block();
					}
					break;
				}
				State = 126;
				Match(T__12);
				State = 127;
				Match(T__9);
				State = 128;
				exp(0);
				State = 129;
				Match(T__10);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 131;
				Match(T__13);
				State = 132;
				Match(T__9);
				State = 133;
				exp(0);
				State = 134;
				Match(T__10);
				State = 180;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 135;
					Match(T__4);
					State = 136;
					block();
					State = 137;
					Match(T__5);
					State = 149;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 138;
							Match(T__14);
							State = 139;
							Match(T__13);
							State = 140;
							Match(T__9);
							State = 141;
							exp(0);
							State = 142;
							Match(T__10);
							State = 143;
							Match(T__4);
							State = 144;
							block();
							State = 145;
							Match(T__5);
							}
							} 
						}
						State = 151;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					}
					State = 157;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 152;
						Match(T__14);
						State = 153;
						Match(T__4);
						State = 154;
						block();
						State = 155;
						Match(T__5);
						}
						break;
					}
					}
					break;
				case T__15:
					{
					State = 159;
					Match(T__15);
					State = 160;
					block();
					State = 171;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 161;
							Match(T__14);
							State = 162;
							Match(T__13);
							State = 163;
							Match(T__9);
							State = 164;
							exp(0);
							State = 165;
							Match(T__10);
							State = 166;
							Match(T__15);
							State = 167;
							block();
							}
							} 
						}
						State = 173;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					}
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__14) {
						{
						State = 174;
						Match(T__14);
						State = 175;
						block();
						}
					}

					State = 178;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 182;
				Match(T__16);
				State = 183;
				Match(T__9);
				State = 184;
				Match(NAME);
				State = 185;
				Match(T__1);
				State = 186;
				exp(0);
				State = 187;
				Match(T__17);
				State = 188;
				exp(0);
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 189;
					Match(T__17);
					State = 190;
					exp(0);
					}
				}

				State = 193;
				Match(T__10);
				State = 202;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 194;
					Match(T__4);
					State = 195;
					block();
					State = 196;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 198;
					Match(T__6);
					State = 199;
					block();
					State = 200;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 204;
				Match(T__16);
				State = 205;
				Match(T__9);
				State = 206;
				stat();
				State = 207;
				Match(T__0);
				State = 208;
				exp(0);
				State = 209;
				Match(T__0);
				State = 210;
				stat();
				State = 211;
				Match(T__10);
				State = 220;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 212;
					Match(T__4);
					State = 213;
					block();
					State = 214;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 216;
					Match(T__6);
					State = 217;
					block();
					State = 218;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 222;
				Match(T__16);
				State = 223;
				Match(T__9);
				State = 224;
				namelist();
				State = 225;
				Match(T__18);
				State = 226;
				explist();
				State = 227;
				Match(T__10);
				State = 236;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 228;
					Match(T__4);
					State = 229;
					block();
					State = 230;
					Match(T__5);
					}
					break;
				case T__6:
					{
					State = 232;
					Match(T__6);
					State = 233;
					block();
					State = 234;
					Match(T__7);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 238;
				Match(T__19);
				State = 239;
				funcname();
				State = 240;
				funcbody();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 242;
				_la = TokenStream.LA(1);
				if ( !(_la==T__20 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 243;
				Match(T__19);
				State = 244;
				Match(NAME);
				State = 245;
				funcbody();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 246;
				native_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public Native_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNative_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNative_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_callContext native_call() {
		Native_callContext _localctx = new Native_callContext(Context, State);
		EnterRule(_localctx, 6, RULE_native_call);
		int _la;
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				Match(T__22);
				State = 250;
				Match(NAME);
				State = 251;
				Match(T__9);
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431417925861409L) != 0)) {
					{
					State = 252;
					explist();
					}
				}

				State = 255;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				Match(T__22);
				State = 257;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LaststatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LaststatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_laststat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitLaststat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLaststat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LaststatContext laststat() {
		LaststatContext _localctx = new LaststatContext(Context, State);
		EnterRule(_localctx, 8, RULE_laststat);
		int _la;
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				Match(T__23);
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431417925861409L) != 0)) {
					{
					State = 261;
					explist();
					}
				}

				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				Match(T__2);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265;
				Match(T__24);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 266;
					Match(T__0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 10, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(T__25);
			State = 272;
			Match(NAME);
			State = 273;
			Match(T__25);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SelenekoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SelenekoParser.NAME, i);
		}
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 12, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(NAME);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 276;
				Match(T__26);
				State = 277;
				Match(NAME);
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 283;
				Match(T__27);
				State = 284;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 14, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			var();
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 288;
				Match(T__17);
				State = 289;
				var();
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(SelenekoParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(SelenekoParser.NAME, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamelist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 16, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(NAME);
			State = 300;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 296;
					Match(T__17);
					State = 297;
					Match(NAME);
					}
					} 
				}
				State = 302;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 18, RULE_explist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 303;
					exp(0);
					State = 304;
					Match(T__17);
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 311;
			exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorPowerContext operatorPower() {
			return GetRuleContext<OperatorPowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__28:
				{
				State = 314;
				Match(T__28);
				}
				break;
			case T__29:
				{
				State = 315;
				Match(T__29);
				}
				break;
			case T__30:
				{
				State = 316;
				Match(T__30);
				}
				break;
			case T__31:
				{
				State = 317;
				Match(T__31);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 318;
				number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 319;
				@string();
				}
				break;
			case T__32:
				{
				State = 320;
				Match(T__32);
				}
				break;
			case T__19:
				{
				State = 321;
				functiondef();
				}
				break;
			case T__9:
			case NAME:
				{
				State = 322;
				prefixexp();
				}
				break;
			case T__4:
				{
				State = 323;
				tableconstructor();
				}
				break;
			case T__22:
			case T__46:
			case T__55:
			case T__56:
				{
				State = 324;
				operatorUnary();
				State = 325;
				exp(8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 363;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 361;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 329;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 330;
						operatorPower();
						State = 331;
						exp(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 333;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 334;
						operatorMulDivMod();
						State = 335;
						exp(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 337;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 338;
						operatorAddSub();
						State = 339;
						exp(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 341;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 342;
						operatorStrcat();
						State = 343;
						exp(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 345;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 346;
						operatorComparison();
						State = 347;
						exp(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 349;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 350;
						operatorAnd();
						State = 351;
						exp(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 353;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 354;
						operatorOr();
						State = 355;
						exp(3);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 357;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 358;
						operatorBitwise();
						State = 359;
						exp(2);
						}
						break;
					}
					} 
				}
				State = 365;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 22, RULE_prefixexp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			varOrExp();
			State = 370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 367;
					nameAndArgs();
					}
					} 
				}
				State = 372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarOrExpContext varOrExp() {
			return GetRuleContext<VarOrExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctioncall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 24, RULE_functioncall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			varOrExp();
			State = 375;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 374;
					nameAndArgs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 377;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VarOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarOrExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrExpContext varOrExp() {
		VarOrExpContext _localctx = new VarOrExpContext(Context, State);
		EnterRule(_localctx, 26, RULE_varOrExp);
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380;
				Match(T__9);
				State = 381;
				exp(0);
				State = 382;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext[] varSuffix() {
			return GetRuleContexts<VarSuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSuffixContext varSuffix(int i) {
			return GetRuleContext<VarSuffixContext>(i);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 28, RULE_var);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 386;
				Match(NAME);
				}
				break;
			case T__9:
				{
				State = 387;
				Match(T__9);
				State = 388;
				exp(0);
				State = 389;
				Match(T__10);
				State = 390;
				varSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 394;
					varSuffix();
					}
					} 
				}
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext[] nameAndArgs() {
			return GetRuleContexts<NameAndArgsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameAndArgsContext nameAndArgs(int i) {
			return GetRuleContext<NameAndArgsContext>(i);
		}
		public VarSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitVarSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarSuffixContext varSuffix() {
		VarSuffixContext _localctx = new VarSuffixContext(Context, State);
		EnterRule(_localctx, 30, RULE_varSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070450532516365344L) != 0)) {
				{
				{
				State = 400;
				nameAndArgs();
				}
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__33:
				{
				State = 406;
				Match(T__33);
				State = 407;
				exp(0);
				State = 408;
				Match(T__34);
				}
				break;
			case T__26:
				{
				State = 410;
				Match(T__26);
				State = 411;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameAndArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public NameAndArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameAndArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNameAndArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameAndArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameAndArgsContext nameAndArgs() {
		NameAndArgsContext _localctx = new NameAndArgsContext(Context, State);
		EnterRule(_localctx, 32, RULE_nameAndArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__27) {
				{
				State = 414;
				Match(T__27);
				State = 415;
				Match(NAME);
				}
			}

			State = 418;
			args();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 34, RULE_args);
		int _la;
		try {
			State = 427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420;
				Match(T__9);
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431417925861409L) != 0)) {
					{
					State = 421;
					explist();
					}
				}

				State = 424;
				Match(T__10);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 425;
				tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 426;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctiondef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 36, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			Match(T__19);
			State = 430;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_funcbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			Match(T__9);
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__32 || _la==NAME) {
				{
				State = 433;
				parlist();
				}
			}

			State = 436;
			Match(T__10);
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 437;
				Match(T__4);
				State = 438;
				block();
				State = 439;
				Match(T__5);
				}
				break;
			case 2:
				{
				State = 441;
				block();
				State = 442;
				Match(T__7);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 40, RULE_parlist);
		int _la;
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				namelist();
				State = 449;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__17) {
					{
					State = 447;
					Match(T__17);
					State = 448;
					Match(T__32);
					}
				}

				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 451;
				Match(T__32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableconstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 42, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			Match(T__4);
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 4600431418462732321L) != 0)) {
				{
				State = 455;
				fieldlist();
				}
			}

			State = 458;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 44, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			field();
			State = 466;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 461;
					fieldsep();
					State = 462;
					field();
					}
					} 
				}
				State = 468;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__17) {
				{
				State = 469;
				fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SelenekoParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 46, RULE_field);
		try {
			State = 482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				Match(T__33);
				State = 473;
				exp(0);
				State = 474;
				Match(T__34);
				State = 475;
				Match(T__1);
				State = 476;
				exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 478;
				Match(NAME);
				State = 479;
				Match(T__1);
				State = 480;
				exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 481;
				exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldsep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 48, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__17) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 50, RULE_operatorOr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 52, RULE_operatorAnd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 54, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34909494181888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 56, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 58, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = TokenStream.LA(1);
			if ( !(_la==T__45 || _la==T__46) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 60, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4222124650659840L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 62, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 67553994418946048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 64, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 216313519610527744L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorPowerContext : ParserRuleContext {
		public OperatorPowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorPower; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitOperatorPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorPowerContext operatorPower() {
		OperatorPowerContext _localctx = new OperatorPowerContext(Context, State);
		EnterRule(_localctx, 66, RULE_operatorPower);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(T__57);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SelenekoParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(SelenekoParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SelenekoParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT() { return GetToken(SelenekoParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 68, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(SelenekoParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSTRING() { return GetToken(SelenekoParser.CHARSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(SelenekoParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISelenekoListener typedListener = listener as ISelenekoListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISelenekoVisitor<TResult> typedVisitor = visitor as ISelenekoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 70, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070450532247928832L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,70,509,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		1,0,1,0,1,0,1,1,5,1,77,8,1,10,1,12,1,80,9,1,1,1,3,1,83,8,1,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,103,8,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,117,8,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,125,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,148,8,2,10,2,12,2,151,9,
		2,1,2,1,2,1,2,1,2,1,2,3,2,158,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,5,2,170,8,2,10,2,12,2,173,9,2,1,2,1,2,3,2,177,8,2,1,2,1,2,3,2,181,
		8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,192,8,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,203,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,3,2,221,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,3,2,237,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		3,2,248,8,2,1,3,1,3,1,3,1,3,3,3,254,8,3,1,3,1,3,1,3,3,3,259,8,3,1,4,1,
		4,3,4,263,8,4,1,4,1,4,1,4,3,4,268,8,4,3,4,270,8,4,1,5,1,5,1,5,1,5,1,6,
		1,6,1,6,5,6,279,8,6,10,6,12,6,282,9,6,1,6,1,6,3,6,286,8,6,1,7,1,7,1,7,
		5,7,291,8,7,10,7,12,7,294,9,7,1,8,1,8,1,8,5,8,299,8,8,10,8,12,8,302,9,
		8,1,9,1,9,1,9,5,9,307,8,9,10,9,12,9,310,9,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,328,8,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,5,10,362,8,10,10,10,12,10,365,9,10,1,11,1,11,5,11,369,8,11,
		10,11,12,11,372,9,11,1,12,1,12,4,12,376,8,12,11,12,12,12,377,1,13,1,13,
		1,13,1,13,1,13,3,13,385,8,13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,393,8,
		14,1,14,5,14,396,8,14,10,14,12,14,399,9,14,1,15,5,15,402,8,15,10,15,12,
		15,405,9,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,413,8,15,1,16,1,16,3,16,
		417,8,16,1,16,1,16,1,17,1,17,3,17,423,8,17,1,17,1,17,1,17,3,17,428,8,17,
		1,18,1,18,1,18,1,19,1,19,3,19,435,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,3,19,445,8,19,1,20,1,20,1,20,3,20,450,8,20,1,20,3,20,453,8,20,
		1,21,1,21,3,21,457,8,21,1,21,1,21,1,22,1,22,1,22,1,22,5,22,465,8,22,10,
		22,12,22,468,9,22,1,22,3,22,471,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,3,23,483,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
		28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,
		35,1,35,1,35,0,1,20,36,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,0,9,1,0,21,22,2,
		0,1,1,18,18,1,0,38,44,1,0,46,47,1,0,48,51,2,0,23,23,52,55,3,0,23,23,47,
		47,56,57,1,0,63,66,1,0,60,62,550,0,72,1,0,0,0,2,78,1,0,0,0,4,247,1,0,0,
		0,6,258,1,0,0,0,8,269,1,0,0,0,10,271,1,0,0,0,12,275,1,0,0,0,14,287,1,0,
		0,0,16,295,1,0,0,0,18,308,1,0,0,0,20,327,1,0,0,0,22,366,1,0,0,0,24,373,
		1,0,0,0,26,384,1,0,0,0,28,392,1,0,0,0,30,403,1,0,0,0,32,416,1,0,0,0,34,
		427,1,0,0,0,36,429,1,0,0,0,38,432,1,0,0,0,40,452,1,0,0,0,42,454,1,0,0,
		0,44,460,1,0,0,0,46,482,1,0,0,0,48,484,1,0,0,0,50,486,1,0,0,0,52,488,1,
		0,0,0,54,490,1,0,0,0,56,492,1,0,0,0,58,494,1,0,0,0,60,496,1,0,0,0,62,498,
		1,0,0,0,64,500,1,0,0,0,66,502,1,0,0,0,68,504,1,0,0,0,70,506,1,0,0,0,72,
		73,3,2,1,0,73,74,5,0,0,1,74,1,1,0,0,0,75,77,3,4,2,0,76,75,1,0,0,0,77,80,
		1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,81,83,
		3,8,4,0,82,81,1,0,0,0,82,83,1,0,0,0,83,3,1,0,0,0,84,248,5,1,0,0,85,86,
		3,14,7,0,86,87,5,2,0,0,87,88,3,18,9,0,88,248,1,0,0,0,89,248,3,24,12,0,
		90,248,3,10,5,0,91,248,5,3,0,0,92,93,5,4,0,0,93,248,5,59,0,0,94,95,5,5,
		0,0,95,96,3,2,1,0,96,97,5,6,0,0,97,103,1,0,0,0,98,99,5,7,0,0,99,100,3,
		2,1,0,100,101,5,8,0,0,101,103,1,0,0,0,102,94,1,0,0,0,102,98,1,0,0,0,103,
		248,1,0,0,0,104,105,5,9,0,0,105,106,5,10,0,0,106,107,3,20,10,0,107,116,
		5,11,0,0,108,109,5,5,0,0,109,110,3,2,1,0,110,111,5,6,0,0,111,117,1,0,0,
		0,112,113,5,7,0,0,113,114,3,2,1,0,114,115,5,8,0,0,115,117,1,0,0,0,116,
		108,1,0,0,0,116,112,1,0,0,0,117,248,1,0,0,0,118,124,5,12,0,0,119,120,5,
		5,0,0,120,121,3,2,1,0,121,122,5,6,0,0,122,125,1,0,0,0,123,125,3,2,1,0,
		124,119,1,0,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,127,5,13,0,0,127,128,
		5,10,0,0,128,129,3,20,10,0,129,130,5,11,0,0,130,248,1,0,0,0,131,132,5,
		14,0,0,132,133,5,10,0,0,133,134,3,20,10,0,134,180,5,11,0,0,135,136,5,5,
		0,0,136,137,3,2,1,0,137,149,5,6,0,0,138,139,5,15,0,0,139,140,5,14,0,0,
		140,141,5,10,0,0,141,142,3,20,10,0,142,143,5,11,0,0,143,144,5,5,0,0,144,
		145,3,2,1,0,145,146,5,6,0,0,146,148,1,0,0,0,147,138,1,0,0,0,148,151,1,
		0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,157,1,0,0,0,151,149,1,0,0,0,
		152,153,5,15,0,0,153,154,5,5,0,0,154,155,3,2,1,0,155,156,5,6,0,0,156,158,
		1,0,0,0,157,152,1,0,0,0,157,158,1,0,0,0,158,181,1,0,0,0,159,160,5,16,0,
		0,160,171,3,2,1,0,161,162,5,15,0,0,162,163,5,14,0,0,163,164,5,10,0,0,164,
		165,3,20,10,0,165,166,5,11,0,0,166,167,5,16,0,0,167,168,3,2,1,0,168,170,
		1,0,0,0,169,161,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,
		0,172,176,1,0,0,0,173,171,1,0,0,0,174,175,5,15,0,0,175,177,3,2,1,0,176,
		174,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,5,8,0,0,179,181,1,
		0,0,0,180,135,1,0,0,0,180,159,1,0,0,0,181,248,1,0,0,0,182,183,5,17,0,0,
		183,184,5,10,0,0,184,185,5,59,0,0,185,186,5,2,0,0,186,187,3,20,10,0,187,
		188,5,18,0,0,188,191,3,20,10,0,189,190,5,18,0,0,190,192,3,20,10,0,191,
		189,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,202,5,11,0,0,194,195,5,
		5,0,0,195,196,3,2,1,0,196,197,5,6,0,0,197,203,1,0,0,0,198,199,5,7,0,0,
		199,200,3,2,1,0,200,201,5,8,0,0,201,203,1,0,0,0,202,194,1,0,0,0,202,198,
		1,0,0,0,203,248,1,0,0,0,204,205,5,17,0,0,205,206,5,10,0,0,206,207,3,4,
		2,0,207,208,5,1,0,0,208,209,3,20,10,0,209,210,5,1,0,0,210,211,3,4,2,0,
		211,220,5,11,0,0,212,213,5,5,0,0,213,214,3,2,1,0,214,215,5,6,0,0,215,221,
		1,0,0,0,216,217,5,7,0,0,217,218,3,2,1,0,218,219,5,8,0,0,219,221,1,0,0,
		0,220,212,1,0,0,0,220,216,1,0,0,0,221,248,1,0,0,0,222,223,5,17,0,0,223,
		224,5,10,0,0,224,225,3,16,8,0,225,226,5,19,0,0,226,227,3,18,9,0,227,236,
		5,11,0,0,228,229,5,5,0,0,229,230,3,2,1,0,230,231,5,6,0,0,231,237,1,0,0,
		0,232,233,5,7,0,0,233,234,3,2,1,0,234,235,5,8,0,0,235,237,1,0,0,0,236,
		228,1,0,0,0,236,232,1,0,0,0,237,248,1,0,0,0,238,239,5,20,0,0,239,240,3,
		12,6,0,240,241,3,38,19,0,241,248,1,0,0,0,242,243,7,0,0,0,243,244,5,20,
		0,0,244,245,5,59,0,0,245,248,3,38,19,0,246,248,3,6,3,0,247,84,1,0,0,0,
		247,85,1,0,0,0,247,89,1,0,0,0,247,90,1,0,0,0,247,91,1,0,0,0,247,92,1,0,
		0,0,247,102,1,0,0,0,247,104,1,0,0,0,247,118,1,0,0,0,247,131,1,0,0,0,247,
		182,1,0,0,0,247,204,1,0,0,0,247,222,1,0,0,0,247,238,1,0,0,0,247,242,1,
		0,0,0,247,246,1,0,0,0,248,5,1,0,0,0,249,250,5,23,0,0,250,251,5,59,0,0,
		251,253,5,10,0,0,252,254,3,18,9,0,253,252,1,0,0,0,253,254,1,0,0,0,254,
		255,1,0,0,0,255,259,5,11,0,0,256,257,5,23,0,0,257,259,5,59,0,0,258,249,
		1,0,0,0,258,256,1,0,0,0,259,7,1,0,0,0,260,262,5,24,0,0,261,263,3,18,9,
		0,262,261,1,0,0,0,262,263,1,0,0,0,263,270,1,0,0,0,264,270,5,3,0,0,265,
		267,5,25,0,0,266,268,5,1,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,270,1,
		0,0,0,269,260,1,0,0,0,269,264,1,0,0,0,269,265,1,0,0,0,270,9,1,0,0,0,271,
		272,5,26,0,0,272,273,5,59,0,0,273,274,5,26,0,0,274,11,1,0,0,0,275,280,
		5,59,0,0,276,277,5,27,0,0,277,279,5,59,0,0,278,276,1,0,0,0,279,282,1,0,
		0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,285,1,0,0,0,282,280,1,0,0,0,283,
		284,5,28,0,0,284,286,5,59,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,13,1,
		0,0,0,287,292,3,28,14,0,288,289,5,18,0,0,289,291,3,28,14,0,290,288,1,0,
		0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,15,1,0,0,0,294,
		292,1,0,0,0,295,300,5,59,0,0,296,297,5,18,0,0,297,299,5,59,0,0,298,296,
		1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,17,1,0,0,0,
		302,300,1,0,0,0,303,304,3,20,10,0,304,305,5,18,0,0,305,307,1,0,0,0,306,
		303,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,1,
		0,0,0,310,308,1,0,0,0,311,312,3,20,10,0,312,19,1,0,0,0,313,314,6,10,-1,
		0,314,328,5,29,0,0,315,328,5,30,0,0,316,328,5,31,0,0,317,328,5,32,0,0,
		318,328,3,68,34,0,319,328,3,70,35,0,320,328,5,33,0,0,321,328,3,36,18,0,
		322,328,3,22,11,0,323,328,3,42,21,0,324,325,3,64,32,0,325,326,3,20,10,
		8,326,328,1,0,0,0,327,313,1,0,0,0,327,315,1,0,0,0,327,316,1,0,0,0,327,
		317,1,0,0,0,327,318,1,0,0,0,327,319,1,0,0,0,327,320,1,0,0,0,327,321,1,
		0,0,0,327,322,1,0,0,0,327,323,1,0,0,0,327,324,1,0,0,0,328,363,1,0,0,0,
		329,330,10,9,0,0,330,331,3,66,33,0,331,332,3,20,10,9,332,362,1,0,0,0,333,
		334,10,7,0,0,334,335,3,60,30,0,335,336,3,20,10,8,336,362,1,0,0,0,337,338,
		10,6,0,0,338,339,3,58,29,0,339,340,3,20,10,7,340,362,1,0,0,0,341,342,10,
		5,0,0,342,343,3,56,28,0,343,344,3,20,10,5,344,362,1,0,0,0,345,346,10,4,
		0,0,346,347,3,54,27,0,347,348,3,20,10,5,348,362,1,0,0,0,349,350,10,3,0,
		0,350,351,3,52,26,0,351,352,3,20,10,4,352,362,1,0,0,0,353,354,10,2,0,0,
		354,355,3,50,25,0,355,356,3,20,10,3,356,362,1,0,0,0,357,358,10,1,0,0,358,
		359,3,62,31,0,359,360,3,20,10,2,360,362,1,0,0,0,361,329,1,0,0,0,361,333,
		1,0,0,0,361,337,1,0,0,0,361,341,1,0,0,0,361,345,1,0,0,0,361,349,1,0,0,
		0,361,353,1,0,0,0,361,357,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,
		364,1,0,0,0,364,21,1,0,0,0,365,363,1,0,0,0,366,370,3,26,13,0,367,369,3,
		32,16,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,
		0,371,23,1,0,0,0,372,370,1,0,0,0,373,375,3,26,13,0,374,376,3,32,16,0,375,
		374,1,0,0,0,376,377,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,25,1,0,
		0,0,379,385,3,28,14,0,380,381,5,10,0,0,381,382,3,20,10,0,382,383,5,11,
		0,0,383,385,1,0,0,0,384,379,1,0,0,0,384,380,1,0,0,0,385,27,1,0,0,0,386,
		393,5,59,0,0,387,388,5,10,0,0,388,389,3,20,10,0,389,390,5,11,0,0,390,391,
		3,30,15,0,391,393,1,0,0,0,392,386,1,0,0,0,392,387,1,0,0,0,393,397,1,0,
		0,0,394,396,3,30,15,0,395,394,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,
		397,398,1,0,0,0,398,29,1,0,0,0,399,397,1,0,0,0,400,402,3,32,16,0,401,400,
		1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,412,1,0,0,
		0,405,403,1,0,0,0,406,407,5,34,0,0,407,408,3,20,10,0,408,409,5,35,0,0,
		409,413,1,0,0,0,410,411,5,27,0,0,411,413,5,59,0,0,412,406,1,0,0,0,412,
		410,1,0,0,0,413,31,1,0,0,0,414,415,5,28,0,0,415,417,5,59,0,0,416,414,1,
		0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,3,34,17,0,419,33,1,0,0,0,
		420,422,5,10,0,0,421,423,3,18,9,0,422,421,1,0,0,0,422,423,1,0,0,0,423,
		424,1,0,0,0,424,428,5,11,0,0,425,428,3,42,21,0,426,428,3,70,35,0,427,420,
		1,0,0,0,427,425,1,0,0,0,427,426,1,0,0,0,428,35,1,0,0,0,429,430,5,20,0,
		0,430,431,3,38,19,0,431,37,1,0,0,0,432,434,5,10,0,0,433,435,3,40,20,0,
		434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,444,5,11,0,0,437,438,
		5,5,0,0,438,439,3,2,1,0,439,440,5,6,0,0,440,445,1,0,0,0,441,442,3,2,1,
		0,442,443,5,8,0,0,443,445,1,0,0,0,444,437,1,0,0,0,444,441,1,0,0,0,445,
		39,1,0,0,0,446,449,3,16,8,0,447,448,5,18,0,0,448,450,5,33,0,0,449,447,
		1,0,0,0,449,450,1,0,0,0,450,453,1,0,0,0,451,453,5,33,0,0,452,446,1,0,0,
		0,452,451,1,0,0,0,453,41,1,0,0,0,454,456,5,5,0,0,455,457,3,44,22,0,456,
		455,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,459,5,6,0,0,459,43,1,0,
		0,0,460,466,3,46,23,0,461,462,3,48,24,0,462,463,3,46,23,0,463,465,1,0,
		0,0,464,461,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,
		470,1,0,0,0,468,466,1,0,0,0,469,471,3,48,24,0,470,469,1,0,0,0,470,471,
		1,0,0,0,471,45,1,0,0,0,472,473,5,34,0,0,473,474,3,20,10,0,474,475,5,35,
		0,0,475,476,5,2,0,0,476,477,3,20,10,0,477,483,1,0,0,0,478,479,5,59,0,0,
		479,480,5,2,0,0,480,483,3,20,10,0,481,483,3,20,10,0,482,472,1,0,0,0,482,
		478,1,0,0,0,482,481,1,0,0,0,483,47,1,0,0,0,484,485,7,1,0,0,485,49,1,0,
		0,0,486,487,5,36,0,0,487,51,1,0,0,0,488,489,5,37,0,0,489,53,1,0,0,0,490,
		491,7,2,0,0,491,55,1,0,0,0,492,493,5,45,0,0,493,57,1,0,0,0,494,495,7,3,
		0,0,495,59,1,0,0,0,496,497,7,4,0,0,497,61,1,0,0,0,498,499,7,5,0,0,499,
		63,1,0,0,0,500,501,7,6,0,0,501,65,1,0,0,0,502,503,5,58,0,0,503,67,1,0,
		0,0,504,505,7,7,0,0,505,69,1,0,0,0,506,507,7,8,0,0,507,71,1,0,0,0,46,78,
		82,102,116,124,149,157,171,176,180,191,202,220,236,247,253,258,262,267,
		269,280,285,292,300,308,327,361,363,370,377,384,392,397,403,412,416,422,
		427,434,444,449,452,456,466,470,482
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AntlrTests.NekoScript
